{"version":3,"file":"aimapi.min.js","sources":["../src/aimConf.js","../utils/modality.js","../utils/aid.js","../src/Aim.jsx","../src/aimHelper.js"],"sourcesContent":["export default {\n  aimVersion: \"AIMv4_3\",\n  \"xmlns:xsi\": \"http://www.w3.org/2001/XMLSchema-instance\",\n  \"xmlns:rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n  xmlns: \"gme://caCORE.caCORE/4.4/edu.northwestern.radiology.AIM\",\n  \"xsi:schemaLocation\":\n    \"gme://caCORE.caCORE/4.4/edu.northwestern.radiology.AIM AIM_v4.2_rv2_XML.xsd\"\n};\n","var dcmDesignator = \"DCM\";\nvar lexVersion = \"20121129\";\n//from the link below\n//http://dicom.nema.org/medical/dicom/current/output/chtml/part16/sect_CID_29.html\n//http://www.dicomlibrary.com/dicom/sop/\n\n//Default Values=> codeValue:99EPADM0 codeMaeaning:NA codingSchemeDesignator:99EPAD\n\nexport var modalities = {\n  \"1.2.840.10008.5.1.4.1.1.2\": {\n    codeValue: \"CT\",\n    codeMeaning: \"Computed Tomography\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion,\n  },\n  \"1.2.840.10008.5.1.4.1.1.1\": {\n    codeValue: \"CR\",\n    codeMeaning: \"Computed Radiography\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion,\n  },\n  \"1.2.840.10008.5.1.4.1.1.128\": {\n    codeValue: \"PT\",\n    codeMeaning: \"Positron emission tomography\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion,\n  },\n  \"1.2.840.10008.5.1.4.1.1.4\": {\n    codeValue: \"MR\",\n    codeMeaning: \"Magnetic Resonance\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion,\n  },\n  \"1.2.840.10008.5.1.4.1.1.6.1\": {\n    codeValue: \"US\",\n    codeMeaning: \"Ultrasound\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion,\n  },\n  \"1.2.840.10008.5.1.4.1.1.1.2\": {\n    codeValue: \"MG\",\n    codeMeaning: \"Mammography\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion,\n  },\n  \"1.2.840.10008.5.1.4.1.1.1.2.1\": {\n    codeValue: \"MG\",\n    codeMeaning: \"Mammography\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion,\n  },\n  CT: {\n    codeValue: \"CT\",\n    codeMeaning: \"Computed Tomography\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion,\n  },\n  CR: {\n    codeValue: \"CR\",\n    codeMeaning: \"Digital Radiography\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion,\n  },\n  DX: {\n    codeValue: \"DX\",\n    codeMeaning: \"Computed Radiography\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion,\n  },\n  PT: {\n    codeValue: \"PT\",\n    codeMeaning: \"Positron emission tomography\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion,\n  },\n  MR: {\n    codeValue: \"MR\",\n    codeMeaning: \"Magnetic Resonance\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion,\n  },\n  US: {\n    codeValue: \"US\",\n    codeMeaning: \"Ultrasound\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion,\n  },\n  MG: {\n    codeValue: \"MG\",\n    codeMeaning: \"Mammography\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion,\n  },\n  \"PET-CT\": {\n    codeValue: \"RID10341\",\n    codeMeaning: \"PET-CT\",\n    codingSchemeDesignator: \"RADLEX\",\n    codingSchemeVersion: \"4.1\",\n  },\n  \"PET-MR\": {\n    codeValue: \"RID10342\",\n    codeMeaning: \"PET-MR\",\n    codingSchemeDesignator: \"RADLEX\",\n    codingSchemeVersion: \"4.1\",\n  },\n  \"US-RF\": {\n    codeValue: \"RID49581\",\n    codeMeaning: \"US-RF\",\n    codingSchemeDesignator: \"RADLEX\",\n    codingSchemeVersion: \"4.1\",\n  },\n};\n","/**\n * For creating DICOM uids\n * Taken from dcmjs MetaDictionary\n * https://github.com/dcmjs-org/dcmjs/blob/master/src/DicomMetaDictionary.js#L5\n */\nexport function generateUid() {\n  let uid = \"2.25.\" + Math.floor(1 + Math.random() * 9);\n  for (let index = 0; index < 38; index++) {\n    uid = uid + Math.floor(Math.random() * 10);\n  }\n  return uid;\n}\n\nexport function persistExpandView(expanded, data, newData, id) {\n  const expandMap = {};\n  let counter = 0;\n  newData.forEach((el, i) => {\n    if (counter < data.length) {\n      if (el[id] === data[counter][id]) {\n        expandMap[i] = expanded[counter];\n        counter += 1;\n      } else {\n        expandMap[i] = false;\n      }\n    }\n  });\n  return expandMap;\n}\n","import aimConf from \"./aimConf\";\nimport { modalities } from \"../utils/modality\";\nimport { generateUid } from \"../utils/aid\";\nimport { enumAimType, getAimImageData, getStudyAimData, addSemanticAnswersToAimData, addUserToAimData } from \"./aimHelper\";\n\nclass Aim {\n  constructor(data, aimType, updatedAimId, trackingUId = generateUid()) {\n    let aimData;\n    const { image, study, answers, user } = data;\n    // new aim creation (data includes image||study data and answers)\n    if (image || study || answers) {\n      if (aimType === enumAimType.imageAnnotation) {\n        aimData = getAimImageData(image);\n      }\n      if (aimType === enumAimType.studyAnnotation) {\n        aimData = getStudyAimData(study);\n      }\n      addSemanticAnswersToAimData(answers, aimData);\n      // addUserToAimData(user, aimData);\n    }\n    else { //old way of aim creation to support functionalities that depend on aimapi\n      aimData = data;\n    }\n    this.temp = {};\n    ({\n      aim: this.temp.aim,\n      study: this.temp.study,\n      series: this.temp.series,\n      image: this.temp.image,\n      segmentation: this.temp.segmentation,\n      equipment: this.temp.equipment,\n      user: this.temp.user,\n      person: this.temp.person,\n    } = aimData);\n    this.temp.aimType = aimType;\n    this.temp.aim.trackingUId = trackingUId;\n    // this.xmlns = aimConf.xmlns;\n    // this[\"xmlns:rdf\"] = aimConf[\"xmlns:rdf\"];\n    // this[\"xmlns:xsi\"] = aimConf[\"xmlns:xsi\"];\n    this.aimVersion = aimConf.aimVersion;\n    // this[\"xsi:schemaLocation\"] = aimConf[\"xsi:schemaLocation\"];\n    this.uniqueIdentifier = \"\";\n    this.studyInstanceUid = { root: this.temp.aim.studyInstanceUid };\n    this.seriesInstanceUid = { root: generateUid() };\n    this.accessionNumber = { value: this.temp.study.accessionNumber };\n    this.dateTime = { value: this.getDate() };\n    this.user = user;\n    // this.user = this._createUser(this.temp.user);\n    this.equipment = this._createEquipment(this.temp.equipment);\n    this.person = this._createPerson(this.temp.person);\n    this.imageAnnotations = {\n      ImageAnnotation: [this._createImageAnnotations()],\n    };\n    if (updatedAimId === undefined)\n      this.uniqueIdentifier = { root: generateUid() };\n    else this.uniqueIdentifier = { root: updatedAimId };\n  }\n\n  static parse(data) {\n    return new Aim(data);\n  }\n\n  // static getMarkups(aim) {\n  //   let annotations = [];\n  //   let annotation = {};\n  //   const markupEntities =\n  //     aim.imageAnnotations.ImageAnnotation.markupEntityCollection.MarkupEntity;\n\n  //   if (markupEntities.constructor === Array) {\n  //     markupEntities.map(markupEntity => {\n  //       var imageId = markupEntity[\"imageReferenceUid\"][\"root\"];\n  //       var markupUid = markupEntity[\"uniqueIdentifier\"][\"root\"];\n  //       var calculations = this.getCalculationEntitiesOfMarkUp(aim, markupUid);\n  //       annotations.push({\n  //         imageId: imageId,\n  //         markupType: markupEntity[\"xsi:type\"],\n  //         coordinates:\n  //           markupEntity.twoDimensionSpatialCoordinateCollection\n  //             .TwoDimensionSpatialCoordinate,\n  //         calculations: calculations\n  //       });\n  //       this.getCalculationEntitiesOfMarkUp(aim);\n  //     });\n  //     return annotations;\n  //   } else if (\n  //     Object.entries(markupEntities).length !== 0 &&\n  //     markupEntities.constructor === Object\n  //   ) {\n  //     const imageId = markupEntities[\"imageReferenceUid\"][\"root\"];\n  //     const markupUid = markupEntities[\"uniqueIdentifier\"][\"root\"];\n  //     const calculations = this.getCalculationEntitiesOfMarkUp(aim, markupUid);\n  //     return {\n  //       imageId: imageId,\n  //       markupType: markupEntities[\"xsi:type\"],\n  //       coordinates:\n  //         markupEntities.twoDimensionSpatialCoordinateCollection\n  //           .TwoDimensionSpatialCoordinate,\n  //       calculations: calculations\n  //     };\n  //   }\n  // }\n\n  getDate = () => {\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = (\"0\" + (now.getMonth() + 1)).slice(-2);\n    const day = (\"0\" + now.getDate()).slice(-2);\n    const hours = (\"0\" + now.getHours()).slice(-2);\n    const minutes = (\"0\" + now.getMinutes()).slice(-2);\n    const seconds = (\"0\" + now.getSeconds()).slice(-2);\n    return year + month + day + hours + minutes + seconds;\n  };\n\n  _createObject = (name, value) => {\n    var obj = {};\n    obj[name] = { value };\n    return obj;\n  };\n\n  /*                                          */\n  /*  Calculation Entitiy Realted Functions   */\n  /*                                          */\n\n  _createDimension = (label, index = 0, size = 1) => {\n    return {\n      Dimension: [\n        Object.assign(\n          {},\n          this._createObject(\"index\", index),\n          this._createObject(\"size\", size),\n          this._createObject(\"label\", label)\n        ),\n      ],\n    };\n  };\n\n  _createDoubleDataType = () => {\n    var obj = {\n      dataType: {\n        code: \"C48870\",\n        codeSystem: \"NCI\",\n        \"iso:displayName\": {\n          \"xmlns:iso\": \"uri:iso.org:21090\",\n          value: \"Double\",\n        },\n      },\n    };\n    return obj;\n  };\n\n  //preLabel is used for preceding the name like LongAxis || ShortAxis\n  _createCalcResult = (unit, label, value, preLabel = \"\") => {\n    var obj = this._createObject(\"unitOfMeasure\", unit);\n    Object.assign(obj, this._createDoubleDataType());\n    obj[\"xsi:type\"] = \"CompactCalculationResult\";\n    obj[\"dimensionCollection\"] = this._createDimension(preLabel + label);\n    obj[\"type\"] = \"Scalar\";\n    Object.assign(obj, this._createObject(\"value\", `${value}`));\n    return obj;\n  };\n\n  //if called with the default values returns DCM type code\n  _createTypeCode = (\n    code = \"11203\",\n    codeSystemName = \"DCM\",\n    displayNameValue = \"Attenuation Coefficient\"\n  ) => {\n    var obj = {};\n    obj[\"code\"] = code;\n    obj[\"codeSystemName\"] = codeSystemName;\n    obj[\"iso:displayName\"] = {\n      \"xmlns:iso\": \"uri:iso.org:21090\",\n      value: displayNameValue,\n    };\n    return obj;\n  };\n\n  createLengthCalcEntity = (length) => {\n    const { unit, value } = length;\n    const obj = {};\n    const uId = generateUid();\n    obj[\"uniqueIdentifier\"] = { root: uId };\n    obj[\"typeCode\"] = [this._createTypeCode(\"G-D7FE\", \"SRT\", \"Length\")];\n    obj[\"description\"] = { value: \"Length\" };\n    obj[\"calculationResultCollection\"] = {\n      CalculationResult: [this._createCalcResult(unit, \"LineLength\", value)],\n    };\n    this.imageAnnotations.ImageAnnotation[0].calculationEntityCollection[\n      \"CalculationEntity\"\n    ].push(obj);\n    return uId;\n  };\n\n  createLongAxisCalcEntity = (longAxis) => {\n    const { unit, value } = longAxis;\n    const obj = {};\n    const uId = generateUid();\n    obj[\"uniqueIdentifier\"] = { root: uId };\n    obj[\"typeCode\"] = [this._createTypeCode(\"G-A185\", \"SRT\", \"LongAxis\")];\n    obj[\"description\"] = { value: \"LongAxis\" };\n    obj[\"calculationResultCollection\"] = {\n      CalculationResult: [this._createCalcResult(unit, \"LongAxis\", value)],\n    };\n    this.imageAnnotations.ImageAnnotation[0].calculationEntityCollection[\n      \"CalculationEntity\"\n    ].push(obj);\n    return uId;\n  };\n\n  createShortAxisCalcEntity = (shortAxis) => {\n    const { unit, value } = shortAxis;\n    const obj = {};\n    const uId = generateUid();\n    obj[\"uniqueIdentifier\"] = { root: uId };\n    obj[\"typeCode\"] = [this._createTypeCode(\"G-A186\", \"SRT\", \"ShortAxis\")];\n    obj[\"description\"] = { value: \"ShortAxis\" };\n    obj[\"calculationResultCollection\"] = {\n      CalculationResult: [this._createCalcResult(unit, \"ShortAxis\", value)],\n    };\n    this.imageAnnotations.ImageAnnotation[0].calculationEntityCollection[\n      \"CalculationEntity\"\n    ].push(obj);\n    return uId;\n  };\n\n  createAreaCalcEntity = (area) => {\n    const { unit, value } = area;\n    const obj = {};\n    const uId = generateUid();\n    obj[\"uniqueIdentifier\"] = { root: uId };\n    obj[\"typeCode\"] = [this._createTypeCode(\"99EPADA4\", \"99EPAD\", \"Area\")];\n    obj[\"description\"] = { value: \"Area\" };\n    obj[\"calculationResultCollection\"] = {\n      CalculationResult: [this._createCalcResult(unit, \"Area\", value)],\n    };\n    this.imageAnnotations.ImageAnnotation[0].calculationEntityCollection[\n      \"CalculationEntity\"\n    ].push(obj);\n    return uId;\n  };\n\n  createVolumeCalcEntity = (volume) => {\n    const { unit, value } = volume;\n    const obj = {};\n    const uId = generateUid();\n    obj[\"uniqueIdentifier\"] = { root: uId };\n    obj[\"typeCode\"] = [this._createTypeCode(\"RID28668\", \"Radlex\", \"Volume\")];\n    obj[\"description\"] = { value: \"Volume\" };\n    obj[\"calculationResultCollection\"] = {\n      CalculationResult: [this._createCalcResult(unit, \"Volume\", value)],\n    };\n    this.imageAnnotations.ImageAnnotation[0].calculationEntityCollection[\n      \"CalculationEntity\"\n    ].push(obj);\n    return uId;\n  };\n\n  createMeanCalcEntity = (value, preLabel) => {\n    let typeCodeDcm,\n      { unit, mean } = value;\n    ({ unit, typeCodeDcm } = this._getAimUnitAndDcmTypeCode(unit));\n    var obj = {};\n    const uId = generateUid();\n    obj[\"uniqueIdentifier\"] = { root: uId };\n    obj[\"typeCode\"] = [\n      typeCodeDcm,\n      this._createTypeCode(\"R-00317\", \"SRT\", \"Mean\"),\n    ];\n    obj[\"description\"] = { value: \"Mean\" };\n    obj[\"calculationResultCollection\"] = {\n      CalculationResult: [this._createCalcResult(unit, \"Mean\", mean, preLabel)],\n    };\n    this.imageAnnotations.ImageAnnotation[0].calculationEntityCollection.CalculationEntity.push(\n      obj\n    );\n    return uId;\n  };\n\n  createStdDevCalcEntity = (value, preLabel) => {\n    let typeCodeDcm,\n      { unit, stdDev } = value;\n    ({ unit, typeCodeDcm } = this._getAimUnitAndDcmTypeCode(unit));\n\n    var obj = {};\n    const uId = generateUid();\n    obj[\"uniqueIdentifier\"] = { root: uId };\n    obj[\"typeCode\"] = [\n      typeCodeDcm,\n      this._createTypeCode(\"R-10047\", \"SRT\", \"Standard Deviation\"),\n    ];\n    obj[\"description\"] = { value: \"Standard Deviation\" };\n    obj[\"calculationResultCollection\"] = {\n      CalculationResult: [\n        this._createCalcResult(unit, \"Standard Deviation\", stdDev, preLabel),\n      ],\n    };\n    this.imageAnnotations.ImageAnnotation[0].calculationEntityCollection[\n      \"CalculationEntity\"\n    ].push(obj);\n    return uId;\n  };\n\n  createMinCalcEntity = (value, preLabel) => {\n    let typeCodeDcm,\n      { unit, min } = value;\n    ({ unit, typeCodeDcm } = this._getAimUnitAndDcmTypeCode(unit));\n    var obj = {};\n    const uId = generateUid();\n    obj[\"uniqueIdentifier\"] = { root: uId };\n    obj[\"typeCode\"] = [\n      typeCodeDcm,\n      this._createTypeCode(\"R-404FB\", \"SRT\", \"Minimum\"),\n    ];\n    obj[\"description\"] = { value: \"Minimum\" };\n    obj[\"calculationResultCollection\"] = {\n      CalculationResult: [\n        this._createCalcResult(unit, \"Minimum\", min, preLabel),\n      ],\n    };\n    this.imageAnnotations.ImageAnnotation[0].calculationEntityCollection[\n      \"CalculationEntity\"\n    ].push(obj);\n    return uId;\n  };\n\n  createMaxCalcEntity = (value, preLabel) => {\n    let typeCodeDcm,\n      { unit, max } = value;\n    ({ unit, typeCodeDcm } = this._getAimUnitAndDcmTypeCode(unit));\n    var obj = {};\n    const uId = generateUid();\n    obj[\"uniqueIdentifier\"] = { root: uId };\n    obj[\"typeCode\"] = [\n      typeCodeDcm,\n      this._createTypeCode(\"G-A437\", \"SRT\", \"Maximum\"),\n    ];\n    obj[\"description\"] = { value: \"Maximum\" };\n    obj[\"calculationResultCollection\"] = {\n      CalculationResult: [\n        this._createCalcResult(unit, \"Maximum\", max, preLabel),\n      ],\n    };\n    this.imageAnnotations.ImageAnnotation[0].calculationEntityCollection[\n      \"CalculationEntity\"\n    ].push(obj);\n    return uId;\n  };\n\n  _getAimUnitAndDcmTypeCode = (unit) => {\n    if (unit === \"hu\")\n      return { unit: \"[hnsf'U]\", typeCodeDcm: this._createTypeCode() };\n    else if (unit === \"suv\")\n      return {\n        unit: \"{SUVbw}g/ml\",\n        typeCodeDcm: this._createTypeCode(126401, \"DCM\", \"SUVbw\"),\n      };\n    return { unit, typeCodeDcm: this._createTypeCode() };\n  };\n\n  createCommonCalcEntites = (mean, stdDev, min, max, preLabel) => {\n    var entities = [];\n    entities.push(this.createMeanCalcEntity(mean, preLabel));\n    entities.push(this.createStdDevCalcEntity(stdDev, preLabel));\n    entities.push(this.createMinCalcEntity(min, preLabel));\n    entities.push(this.createMaxCalcEntity(max, preLabel));\n    return entities;\n  };\n\n  // createLineCalcEntities = (length, mean, stdDev, min, max) => {\n  //   var entities = [];\n  //   entities.push(this.createLengthCalcEntity(length));\n  //   return entities.concat(\n  //     this.createCommonCalcEntites(mean, stdDev, min, max)\n  //   );\n  // };\n\n  createLongAxisCalcEntities = (longAxis, mean, stdDev, min, max) => {\n    var entities = [];\n    entities.push(this.createLongAxisCalcEntity(longAxis));\n    return entities.concat(\n      this.createCommonCalcEntites(mean, stdDev, min, max, \"LongAxis_\")\n    );\n  };\n\n  createShortAxisCalcEntities = (shortAxis, mean, stdDev, min, max) => {\n    var entities = [];\n    entities.push(this.createShortAxisCalcEntity(shortAxis));\n    return entities.concat(\n      this.createCommonCalcEntites(mean, stdDev, min, max, \"ShortAxis_\")\n    );\n  };\n\n  createCalculationEntityCollection = (entities) => {\n    var obj = {};\n    obj[\"calculationEntityCollection\"] = { CalculationEntity: entities };\n    return obj;\n  };\n\n  /*                                          */\n  /*  Markup Entitiy Realted Functions        */\n  /*                                          */\n\n  _createCoordinate = (coordinate, index) => {\n    var obj = {};\n    obj[\"coordinateIndex\"] = { value: index };\n    obj[\"x\"] = { value: coordinate.x };\n    obj[\"y\"] = { value: coordinate.y };\n    return obj;\n  };\n\n  _createCoordinateArray = (points) => {\n    var coordinates = [];\n    points.forEach((point, index) => {\n      coordinates.push(this._createCoordinate(point, index));\n    });\n    return coordinates;\n  };\n\n  addMarkupEntity = (type, shapeIndex, points, imageUid, frameNum, lineStyle) => {\n    if (!this.imageAnnotations.ImageAnnotation[0][\"markupEntityCollection\"])\n      this.imageAnnotations.ImageAnnotation[0][\"markupEntityCollection\"] = { MarkupEntity: [] };\n    var obj = {};\n    obj[\"includeFlag\"] = { value: true };\n    obj[\"twoDimensionSpatialCoordinateCollection\"] = {\n      TwoDimensionSpatialCoordinate: this._createCoordinateArray(points),\n    };\n    const uId = generateUid();\n    obj[\"xsi:type\"] = type;\n\n    this.imageAnnotations.ImageAnnotation[0].markupEntityCollection.MarkupEntity.push(\n      obj\n    );\n    obj[\"uniqueIdentifier\"] = { root: uId };\n    obj[\"shapeIdentifier\"] = { value: shapeIndex };\n    obj[\"includeFlag\"] = { value: true };\n    obj[\"imageReferenceUid\"] = { root: imageUid };\n    obj[\"referencedFrameNumber\"] = { value: frameNum };\n    if (lineStyle) {\n      obj[\"lineStyle\"] = { value: lineStyle };\n    }\n    obj[\"twoDimensionSpatialCoordinateCollection\"] = {\n      TwoDimensionSpatialCoordinate: this._createCoordinateArray(points),\n    };\n    return uId;\n  };\n\n  /*                                          */\n  /*  Image Refrence Entity Collection        */\n  /*                                          */\n  _createModality = () => {\n    if (this.temp.aimType !== enumAimType.studyAnnotation) {\n      const sopClassUid = this.temp.image[0].sopClassUid;\n      if (sopClassUid && modalities[sopClassUid])\n        var {\n          codeValue,\n          codingSchemeDesignator,\n          codeMeaning,\n          codingSchemeVersion,\n        } = modalities[sopClassUid];\n      else {\n        const modality = this.temp.series.modality;\n        if (modality && modalities[modality]) {\n          var {\n            codeValue,\n            codingSchemeDesignator,\n            codeMeaning,\n            codingSchemeVersion,\n          } = modalities[modality];\n        }\n      }\n    }\n    else { //Study annotation\n      const modality = this.temp.study.modality;\n      if (modality && modalities[modality]) {\n        var {\n          codeValue,\n          codingSchemeDesignator,\n          codeMeaning,\n          codingSchemeVersion,\n        } = modalities[modality];\n      }\n    }\n    var obj = {};\n    obj[\"code\"] = codeValue || \"\";\n    obj[\"codeSystemName\"] = codingSchemeDesignator || \"\";\n    obj[\"iso:displayName\"] = {\n      \"xmlns:iso\": \"uri:iso.org:21090\",\n      value: codeMeaning || \"\",\n    };\n    obj[\"codeSystemVersion\"] = codingSchemeVersion || \"\";\n    return obj;\n  };\n\n  _createImageCollection = () => {\n    let obj = {};\n    obj[\"Image\"] = [];\n    this.temp.image.forEach((image) => {\n      let { sopClassUid, sopInstanceUid } = image;\n      if (this.temp.aimType === enumAimType.imageAnnotation) {\n        sopClassUid = { root: sopClassUid };\n        sopInstanceUid = { root: sopInstanceUid };\n      }\n      else {\n        sopClassUid = { root: \"\" };\n        sopInstanceUid = { root: \"\" };\n      }\n      obj[\"Image\"].push({ sopClassUid, sopInstanceUid });\n    });\n    return obj;\n  };\n\n  _createImageSeries = () => {\n    var obj = {};\n    // Study Annotation\n    if (this.temp.aimType === enumAimType.studyAnnotation) {\n      obj[\"instanceUid\"] = { root: \"\" };\n    }\n    else obj[\"instanceUid\"] = { root: this.temp.series.instanceUid };\n    obj[\"modality\"] = this._createModality();\n    obj[\"imageCollection\"] = this._createImageCollection();\n    return obj;\n  };\n\n  _createImageStudy = () => {\n    const {\n      accessionNumber,\n      startTime,\n      instanceUid,\n      startDate,\n    } = this.temp.study;\n    var obj = {};\n    obj[\"instanceUid\"] = { root: instanceUid };\n    obj[\"startDate\"] = { value: startDate };\n    obj[\"startTime\"] = { value: startTime };\n    obj[\"accessionNumber\"] = { value: accessionNumber };\n    obj[\"imageSeries\"] = this._createImageSeries();\n    return obj;\n  };\n\n  _createImageReferenceEntity = () => {\n    var obj = {};\n    obj[\"xsi:type\"] = \"DicomImageReferenceEntity\";\n    obj[\"uniqueIdentifier\"] = { root: generateUid() };\n    obj[\"imageStudy\"] = this._createImageStudy();\n    return obj;\n  };\n\n  _createImageReferanceEntityCollection = () => {\n    var obj = {};\n    obj[\"ImageReferenceEntity\"] = [this._createImageReferenceEntity()];\n    return obj;\n  };\n\n  //\n  //\n  //\n  _createImageAnnotations = () => {\n    const {\n      name,\n      comment,\n      typeCode,\n      imagingPhysicalEntityCollection,\n      imagingObservationEntityCollection,\n      inferenceEntityCollection,\n      trackingUId\n    } = this.temp.aim;\n    var obj = {};\n    obj[\"uniqueIdentifier\"] = { root: generateUid() };\n    obj[\"trackingUniqueIdentifier\"] = { root: trackingUId };\n    obj[\"typeCode\"] = typeCode;\n    obj[\"dateTime\"] = { value: this.getDate() };\n    obj[\"name\"] = name;\n    obj[\"comment\"] = this._getComment(comment);\n    obj[\"precedentReferencedAnnotationUid\"] = { root: \"\" };\n    if (imagingPhysicalEntityCollection)\n      obj[\"imagingPhysicalEntityCollection\"] = imagingPhysicalEntityCollection;\n    if (this.temp.aimType === enumAimType.imageAnnotation) {\n\n      //if this is an image annotation\n      obj[\"calculationEntityCollection\"] = { \"CalculationEntity\": [] };\n      obj[\"imageAnnotationStatementCollection\"] = {\n        ImageAnnotationStatement: [],\n      };\n    }\n    if (imagingObservationEntityCollection)\n      obj[\n        \"imagingObservationEntityCollection\"\n      ] = imagingObservationEntityCollection;\n    if (inferenceEntityCollection)\n      obj[\"inferenceEntityCollection\"] = inferenceEntityCollection;\n    obj[\n      \"imageReferenceEntityCollection\"\n    ] = this._createImageReferanceEntityCollection();\n    return obj;\n  };\n\n  // sanity check to prevent failing for empty comment, but why do I have to send an object with .value?\n  _getComment = (comment) => {\n    if (comment && comment.value) {\n      if (comment.value.length)\n        comment.value = this._getProgrammedComment().concat(\n          \"~~\",\n          comment.value\n        );\n    } else comment.value = this._getProgrammedComment();\n    return comment;\n  };\n\n  _getProgrammedComment = () => {\n    const SEPERATOR = \" / \";\n    let { modality, description, instanceNumber, number } = this.temp.series;\n    if (this.temp.aimType !== enumAimType.imageAnnotation) {\n      instanceNumber = \"\"\n    }\n    if (this.temp.aimType === enumAimType.studyAnnotation) {\n      modality = \"\";\n    }\n    const comment =\n      modality +\n      SEPERATOR +\n      description +\n      SEPERATOR +\n      instanceNumber +\n      SEPERATOR +\n      number;\n    return comment;\n  };\n\n  createImageAnnotationStatement = (referenceType, objectId, subjectId) => {\n    //this is called externally\n    var obj = {};\n    var references;\n    referenceType === 1\n      ? (references = \"CalculationEntityReferencesMarkupEntityStatement\")\n      : (references = \"CalculationEntityReferencesSegmentationEntityStatement\");\n    obj[\"xsi:type\"] = references;\n    obj[\"subjectUniqueIdentifier\"] = { root: subjectId };\n    obj[\"objectUniqueIdentifier\"] = { root: objectId };\n    this.imageAnnotations.ImageAnnotation[0].imageAnnotationStatementCollection.ImageAnnotationStatement.push(\n      obj\n    );\n  };\n\n  // createImageAnnotationStatementCollection = () => {\n  //   var obj = {};\n  //   obj[\"ImageAnnotationStatement\"] = [];\n  //   return obj;\n  // };\n\n  // //\n  // //\n  // // Image Annotations\n  // createImageAnnotation = (annotationStatementCollection = {}) => {\n  //   var obj = {};\n  //   obj[\"dateTime\"] = { value: this.getDate() };\n  //   obj[\n  //     \"imageAnnotationStatementCollection\"\n  //   ] = this.createImageAnnotationStatementCollection();\n  //   return obj;\n  // };\n\n  // createImageAnnotations = imageAnnotation => {\n  //   var obj = {};\n  //   obj[\"imageAnnotations\"] = imageAnnotation;\n  //   return obj;\n  // };\n\n  /*                                                */\n  /*    Segmentation Entitiy Realted Functions      */\n  /*                                                */\n\n  createSegmentationEntity = (segmentation) => {\n    var obj = {};\n    obj[\"referencedSopInstanceUid\"] = {\n      root: segmentation.referencedSopInstanceUid,\n    };\n    obj[\"segmentNumber\"] = { value: 1 };\n    obj[\"seriesInstanceUid\"] = {\n      root: segmentation.seriesInstanceUid,\n    };\n    obj[\"studyInstanceUid\"] = {\n      root: segmentation.studyInstanceUid,\n    };\n    obj[\"xsi:type\"] = \"DicomSegmentationEntity\";\n    obj[\"sopClassUid\"] = { root: \"1.2.840.10008.5.1.4.1.1.66.4\" };\n    obj[\"sopInstanceUid\"] = { root: segmentation.sopInstanceUid };\n    obj[\"uniqueIdentifier\"] = { root: generateUid() };\n    const imageAnnotation = this.imageAnnotations.ImageAnnotation[0];\n    if (!imageAnnotation.segmentationEntityCollection) {\n      imageAnnotation.segmentationEntityCollection = {};\n      imageAnnotation.segmentationEntityCollection.SegmentationEntity = [];\n    }\n    imageAnnotation.segmentationEntityCollection.SegmentationEntity.push(obj);\n    return obj[\"uniqueIdentifier\"];\n  };\n\n  //\n  //\n  // Person\n  _createPerson = (person) => {\n    const { sex, name, patientId, birthDate } = person;\n    return {\n      name: { value: name },\n      id: { value: patientId },\n      birthDate: { value: birthDate },\n      sex: { value: sex },\n    };\n  };\n\n  //\n  //\n  // Eqipment\n  _createEquipment = (equipment) => {\n    const {\n      manufacturerName,\n      manufacturerModelName,\n      softwareVersion,\n    } = equipment;\n    return {\n      manufacturerName: { value: manufacturerName },\n      manufacturerModelName: { value: manufacturerModelName },\n      softwareVersion: { value: softwareVersion },\n    };\n  };\n\n  //\n  //\n  // User\n  _createUser = (user) => {\n    const { name, loginName } = user;\n    return {\n      name: { value: name },\n      loginName: { value: loginName }\n    };\n  };\n\n  getAim = () => {\n    const temp = this[\"temp\"];\n    delete this[\"temp\"];\n    const stringAim = JSON.stringify(this);\n    const wrappedAim = `{\"ImageAnnotationCollection\": ${stringAim} } `;\n    this[\"temp\"] = temp;\n    return wrappedAim;\n  };\n\n  // new method to get the aim json\n  getAimJSON = () => {\n    return JSON.parse(this.getAim());\n  };\n\n  getType = () => {\n    return this.temp.aimType;\n  }\n}\n\nexport default Aim;\n","import Aim from \"./Aim.jsx\";\nexport { Aim };\n\n// moved from aimEditor.jsx\nexport const enumAimType = {\n  imageAnnotation: 1,\n  seriesAnnotation: 2,\n  studyAnnotation: 3,\n};\n\nexport function getImageIdAnnotations(aims) {\n  let imageIdSpecificMarkups = {};\n  try {\n    aims.forEach((aim) => parseAim(aim, imageIdSpecificMarkups));\n  } catch (err) {\n    console.error(\"Preparing ImageIdAnnotations\", err);\n  }\n  return imageIdSpecificMarkups;\n}\n\nfunction parseAim(aim, imageIdSpecificMarkups) {\n  var imageAnnotation =\n    aim.ImageAnnotationCollection.imageAnnotations.ImageAnnotation[0];\n  if (\n    (!imageAnnotation.markupEntityCollection ||\n      imageAnnotation.markupEntityCollection.MarkupEntity.length === 0) &&\n    (!imageAnnotation.segmentationEntityCollection ||\n      imageAnnotation.segmentationEntityCollection.SegmentationEntity.length ===\n        0)\n  ) {\n    const series =\n      imageAnnotation.imageReferenceEntityCollection.ImageReferenceEntity[0]\n        .imageStudy.imageSeries;\n    imageIdSpecificMarkups[\n      series.imageCollection.Image[0].sopInstanceUid.root\n    ] = [{ aimUid: aim.ImageAnnotationCollection.uniqueIdentifier.root }];\n  }\n\n  //check if the aim has markup\n  if (imageAnnotation.markupEntityCollection) {\n    var markupEntities = imageAnnotation.markupEntityCollection.MarkupEntity;\n    markupEntities.forEach((markupEntity) => {\n      const { imageId, data } = getMarkup(markupEntity, aim);\n      if (!imageIdSpecificMarkups[imageId])\n        imageIdSpecificMarkups[imageId] = [data];\n      else imageIdSpecificMarkups[imageId].push(data);\n    });\n  }\n  //check if it has segmentation\n  if (imageAnnotation.segmentationEntityCollection) {\n    var segmentationEntities =\n      imageAnnotation.segmentationEntityCollection.SegmentationEntity;\n    segmentationEntities.forEach((segmentationEntity) => {\n      const { imageId, data } = getSegmentation(segmentationEntity, aim);\n      if (!imageIdSpecificMarkups[imageId])\n        imageIdSpecificMarkups[imageId] = [data];\n      else imageIdSpecificMarkups[imageId].push(data);\n    });\n  }\n}\n\nfunction getMarkup(markupEntity, aim) {\n  let data = {};\n  data[\"markupType\"]=markupEntity[\"xsi:type\"];\n  let imageId = markupEntity[\"imageReferenceUid\"][\"root\"];\n  const frameNumber = markupEntity[\"referencedFrameNumber\"]\n    ? markupEntity[\"referencedFrameNumber\"][\"value\"]\n    : 1;\n  // if (frameNumber > -1) imageId = imageId + \"&frame=\" + frameNumber; //if multiframe reconstruct the imageId\n  imageId = imageId + \"&frame=\" + frameNumber;\n  const markupUid = markupEntity[\"uniqueIdentifier\"][\"root\"];\n  data[\"markupUid\"] = markupUid;\n\n  let calculations = [];\n  try {\n    calculations = getCalculationEntitiesOfMarkUp(aim, markupUid);\n  } catch (error) {\n    console.error(\"Can not get calculations\", error);\n  }\n  if(calculations.length)\n    data[\"calculations\"] = calculations;\n\n\n  data[\"coordinates\"] = markupEntity.twoDimensionSpatialCoordinateCollection.TwoDimensionSpatialCoordinate;\n\n  const aimUid = aim.ImageAnnotationCollection[\"uniqueIdentifier\"][\"root\"];\n  data[\"aimUid\"] =  aimUid;\n  const color = markupEntity?.lineColor?.value;\n  data[\"color\"] = color;\n  \n  if(markupEntity[\"lineStyle\"])\n    data[\"lineStyle\"] = markupEntity[\"lineStyle\"];\n\n  let retData = {\n    imageId,\n    data\n  };\n\n  if (color) retData.data[\"color\"] = color;\n  return retData;\n}\n\nfunction getSegmentation(segmentationEntity, aim) {\n  const imageId = segmentationEntity[\"referencedSopInstanceUid\"][\"root\"];\n  const markupUid = segmentationEntity[\"uniqueIdentifier\"][\"root\"];\n  let calculations = [];\n  try {\n    calculations = getCalculationEntitiesOfMarkUp(aim, markupUid);\n  } catch (error) {\n    console.error(\"Can not get calculations\", error);\n  }\n  const aimUid = aim.ImageAnnotationCollection[\"uniqueIdentifier\"][\"root\"];\n  return {\n    imageId,\n    data: {\n      markupType: segmentationEntity[\"xsi:type\"],\n      calculations,\n      markupUid,\n      aimUid,\n    },\n  };\n}\n\nfunction getCalculationEntitiesOfMarkUp(aim, markupUid) {\n  const imageAnnotationStatements = getImageAnnotationStatements(aim);\n  let calculations = [];\n  imageAnnotationStatements.forEach((statement) => {\n    if (statement.objectUniqueIdentifier.root === markupUid) {\n      const calculationUid = statement.subjectUniqueIdentifier.root;\n      const calculationEntities = getCalculationEntities(aim);\n      calculationEntities.forEach((calculation) => {\n        if (calculation.uniqueIdentifier.root === calculationUid)\n          calculations.push(parseCalculation(calculation));\n      });\n    }\n  });\n  return calculations;\n}\n\nfunction getImageAnnotationStatements(aim) {\n  return aim.ImageAnnotationCollection.imageAnnotations.ImageAnnotation[0]\n    .imageAnnotationStatementCollection\n    ? aim.ImageAnnotationCollection.imageAnnotations.ImageAnnotation[0]\n        .imageAnnotationStatementCollection.ImageAnnotationStatement\n    : [];\n}\n\nfunction getCalculationEntities(aim) {\n  return aim.ImageAnnotationCollection.imageAnnotations.ImageAnnotation[0]\n    .calculationEntityCollection.CalculationEntity;\n}\n\nfunction parseCalculation(calculation) {\n  var obj = {};\n  const calcResult =\n    calculation.calculationResultCollection.CalculationResult[0];\n  if (\n    calculation.calculationResultCollection.CalculationResult[0]\n      .calculationDataCollection\n  ) {\n    const calcValue =\n      calculation.calculationResultCollection.CalculationResult[0]\n        .calculationDataCollection.CalculationData[0];\n    obj[\"value\"] = calcValue[\"value\"][\"value\"];\n  } else obj[\"value\"] = calcResult[\"value\"][\"value\"];\n  obj[\"type\"] = calculation[\"description\"][\"value\"];\n  obj[\"unit\"] = calcResult[\"unitOfMeasure\"][\"value\"];\n  return obj;\n}\n\nexport function getAimImageData(image) {\n  var obj = {};\n  obj.aim = {};\n  obj.study = {};\n  obj.series = {};\n  obj.equipment = {};\n  obj.person = {};\n  obj.image = [];\n  const { aim, study, series, equipment, person } = obj;\n\n  aim.studyInstanceUid = image.data?.string(\"x0020000d\") || image.metadata.x0020000d || \"\";\n\n  study.startTime = image.data?.string(\"x00080030\") || image.metadata?.x00080030 || \"\";\n  study.instanceUid = image.data?.string(\"x0020000d\") || image.metadata?.x0020000d || \"\";\n  study.startDate = image.data?.string(\"x00080020\") || image.metadata?.x00080020 || \"\";\n  study.accessionNumber = image.data?.string(\"x00080050\") || image.metadata?.x00080050 || \"\";\n\n  series.instanceUid = image.data?.string(\"x0020000e\") || image.metadata?.x0020000e || \"\";\n  series.modality = image.data?.string(\"x00080060\") || image.metadata?.x00080060 || \"\";\n  series.number = image.data?.string(\"x00200011\") || image.metadata?.x00200011 || \"\";\n  series.description = image.data?.string(\"x0008103e\") || image.metadata?.x0008103e || \"\";\n  series.instanceNumber = image.data?.string(\"x00200013\") || image.metadata?.x00200013 ||  \"\";\n\n  obj.image.push(getSingleImageData(image));\n\n  equipment.manufacturerName = image.data?.string(\"x00080070\") || image.metadata?.x00080070 || \"\";\n  equipment.manufacturerModelName = image.data?.string(\"x00081090\") ||  image.metadata?.x00081090 || \"\";\n  equipment.softwareVersion = image.data?.string(\"x00181020\") || image.metadata?.x00181020 || \"\";\n\n  person.sex = image.data?.string(\"x00100040\") || image.metadata?.x00100040 || \"\";\n  person.name = image.data?.string(\"x00100010\") || image.metadata?.x00100010 || \"\";\n  person.patientId = image.data?.string(\"x00100020\") || image.metadata?.x00100020 || \"\";\n  person.birthDate = image.data?.string(\"x00100030\") || image.metadata?.x00100030 || \"\";\n\n  return obj;\n}\n\nexport function getStudyAimData(study) {\n  var obj = {};\n  obj.aim = {};\n  obj.study = {};\n  obj.series = {};\n  obj.equipment = {};\n  obj.person = {};\n  obj.image = [];\n  const { aim, study: _study, series, equipment, person, image } = obj;\n  const {\n    studyUID,\n    studyTime,\n    studyDate,\n    studyAccessionNumber,\n    sex,\n    patientName,\n    patientID,\n    birthdate,\n    examTypes,\n  } = study;\n\n  aim.studyInstanceUid = studyUID || \"\";\n\n  _study.startTime = studyTime || \"\";\n  _study.instanceUid = studyUID || \"\";\n  _study.startDate = studyDate || \"\";\n  _study.accessionNumber = studyAccessionNumber || \"\";\n  _study.modality = getStudyModalityFromExamTypes(examTypes) || \"\";\n\n  series.instanceUid = \"\";\n  series.modality = \"\";\n  series.number = \"\";\n  series.description = \"\";\n  series.instanceNumber = \"\";\n\n  image.push({\n    sopClassUid: \"\",\n    sopInstanceUid: \"\",\n  });\n\n  equipment.manufacturerName = \"\";\n  equipment.manufacturerModelName = \"\";\n  equipment.softwareVersion = \"\";\n\n  person.sex = sex || \"\";\n  person.name = patientName || \"\";\n  person.patientId = patientID || \"\";\n  person.birthDate = birthdate || \"\";\n\n  return obj;\n}\n\nexport function addSemanticAnswersToAimData(answers, aimData) {\n  const {\n    name,\n    comment,\n    imagingPhysicalEntityCollection,\n    imagingObservationEntityCollection,\n    inferenceEntity,\n    typeCode,\n  } = answers;\n  aimData.aim.name = name;\n  if (comment) aimData.aim.comment = comment;\n  if (imagingPhysicalEntityCollection)\n    aimData.aim.imagingPhysicalEntityCollection =\n      imagingPhysicalEntityCollection;\n  if (imagingObservationEntityCollection)\n    aimData.aim.imagingObservationEntityCollection =\n      imagingObservationEntityCollection;\n  if (inferenceEntity) aimData.aim.inferenceEntity = inferenceEntity;\n  if (typeCode) aimData.aim.typeCode = typeCode;\n}\n\nexport function addUserToAimData({ name, loginName }, aimData) {\n aimData.user = {name, loginName};\n}\n\nfunction getSingleImageData(image) {\n  return {\n    sopClassUid: image.data.string(\"x00080016\") || image.metadata?.x00080016|| \"\",\n    sopInstanceUid: image.data.string(\"x00080018\") || image.metadata?.x00080018 || \"\",\n  };\n}\n\nfunction addSingleImageDataToAim(aim, image) {\n  if (!aim.image) return;\n  aim.image.push(getSingleImageData(image));\n}\n\nexport const getStudyModalityFromExamTypes = (examTypes) => {\n  console.log(\"Exam types\", examTypes);\n  // remove SEG from examTypes\n  var index = examTypes.indexOf(\"SEG\");\n  if (index > -1) {\n    examTypes.splice(index, 1);\n  }\n  if (!examTypes.length) { console.log(\"Returning empty\"); return \"\"};\n  if (examTypes.length === 1) {console.log(\"Returning \", examTypes[0]);return examTypes[0]};\n  if (examTypes.includes(\"CT\")) {\n    if(examTypes.includes(\"PT\")) return \"PET-CT\";\n    else return \"CT\";\n  }  \n  if (examTypes.includes(\"MR\")){\n    if(examTypes.includes(\"PT\"))return \"PET-MR\";\n    else return \"MR\";\n  } \n  if (examTypes.includes(\"US\") && examTypes.includes(\"RF\"))\n    return \"US-RF\";\n  console.log(\"Returning default value\");\n  return {\n    code: \"99EPADM0\",\n    codeSystemName: \"99EPAD\",\n    \"iso:displayName\": {\n      \"xmlns:iso\": \"uri:iso.org:21090\",\n      value: \"NA\",\n    },\n  };\n};\n\n// ---------- aimapi additional methods --------\n// new method inspired by createAimSegmentation in aimEditor.jsx\nexport function createOfflineAimSegmentation(segmentation, userInfo) {\n  // prapare the seed data and create aim\n  const seedData = getAimImageDataFromSeg(segmentation); //aimhelper\n  // admin/ upload user\n  addUserToSeedData(seedData, userInfo);\n  const aim = new Aim(seedData, enumAimType.imageAnnotation); // no this.updatedAimId.\n  // let dataset = await getDatasetFromBlob(segmentation);\n  // if update segmentation Uid should be same as the previous one\n  // console.log('Dataset series uid', segmentation);\n  // fill the segmentation related aim parts\n  const segEntityData = getSegmentationEntityDataFromSeg(segmentation);\n  // TODO fill in stats\n  addSegmentationToAim(aim, segEntityData, {});\n  // console.log('AIM in segmentation', aim);\n  // remove extra entities\n  delete aim.imageAnnotations.ImageAnnotation[0].calculationEntityCollection;\n  delete aim.imageAnnotations.ImageAnnotation[0].markupEntityCollection;\n  delete aim.imageAnnotations.ImageAnnotation[0]\n    .imageAnnotationStatementCollection;\n\n  // get the segment sequence as an array. we are going to use the first one for aim anyway\n  // TODO what to do for multi-segment if there is no series description\n  if (segmentation.SegmentSequence.constructor.name !== \"Array\") {\n    segmentation.SegmentSequence = [segmentation.SegmentSequence];\n  }\n\n  // add name, comment and segmentation\n  aim.imageAnnotations.ImageAnnotation[0].name = {\n    value:\n      segmentation.SeriesDescription ||\n      segmentation.SegmentSequence[0].SegmentLabel,\n  };\n  // TODO there is no way to fill programmed comment without opening the source image\n  aim.imageAnnotations.ImageAnnotation[0].comment = { value: \"\" };\n  aim.imageAnnotations.ImageAnnotation[0].typeCode = [\n    {\n      code: \"SEG\",\n      codeSystemName: \"99EPAD\",\n      \"iso:displayName\": {\n        \"xmlns:iso\": \"uri:iso.org:21090\",\n        value: \"SEG Only\",\n      },\n    },\n  ];\n\n  return { aim };\n}\n// moved from aimEditor.jsx\nfunction addUserToSeedData(seedData, userInfo) {\n  // this is ui specific, should be changed\n  if (userInfo) {\n    seedData.user = userInfo;\n  } else {\n    let obj = {};\n    obj.loginName = sessionStorage.getItem(\"username\");\n    obj.name = sessionStorage.getItem(\"displayName\");\n    seedData.user = obj;\n  }\n}\n// moved from aimEditor.jsx\nfunction getDatasetFromBlob(segBlob, imageIdx) {\n  return new Promise((resolve) => {\n    let segArrayBuffer;\n    var fileReader = new FileReader();\n    fileReader.onload = (event) => {\n      segArrayBuffer = event.target.result;\n      const dicomData = dcmjs.data.DicomMessage.readFile(segArrayBuffer);\n      const dataset = dcmjs.data.DicomMetaDictionary.naturalizeDataset(\n        dicomData.dict\n      );\n      dataset._meta = dcmjs.data.DicomMetaDictionary.namifyDataset(\n        dicomData.meta\n      );\n      resolve(dataset);\n    };\n    fileReader.readAsArrayBuffer(segBlob);\n  });\n}\n// moved from aimEditor.jsx\nfunction addSegmentationToAim(aim, segEntityData, segStats) {\n  const segId = aim.createSegmentationEntity(segEntityData);\n  const { volume, min, max, mean, stdDev } = segStats;\n  if (mean) {\n    const meanId = aim.createMeanCalcEntity({ mean, unit: \"[hnsf'U]\" });\n    aim.createImageAnnotationStatement(2, segId, meanId);\n  }\n  if (stdDev) {\n    const stdDevId = aim.createStdDevCalcEntity({ stdDev, unit: \"[hnsf'U]\" });\n    aim.createImageAnnotationStatement(2, segId, stdDevId);\n  }\n  if (min) {\n    const minId = aim.createMinCalcEntity({ min, unit: \"[hnsf'U]\" });\n    aim.createImageAnnotationStatement(2, segId, minId);\n  }\n  if (max) {\n    const maxId = aim.createMaxCalcEntity({ max, unit: \"[hnsf'U]\" });\n    aim.createImageAnnotationStatement(2, segId, maxId);\n  }\n  if (volume) {\n    const volumeId = aim.createMaxCalcEntity({ volume, unit: \"mm3\" });\n    aim.createImageAnnotationStatement(2, segId, volumeId);\n  }\n}\n// new method inspired by moved getSegmentationEntityData from aimEditor.jsx\nfunction getSegmentationEntityDataFromSeg(dataset) {\n  const refImage = getRefImageFromSeg(dataset);\n  let obj = {};\n  obj[\"referencedSopInstanceUid\"] = refImage.ReferencedSOPInstanceUID;\n  obj[\"seriesInstanceUid\"] = dataset.SeriesInstanceUID;\n  obj[\"studyInstanceUid\"] = dataset.StudyInstanceUID;\n  obj[\"sopClassUid\"] = dataset.SOPClassUID;\n  obj[\"sopInstanceUid\"] = dataset.SOPInstanceUID;\n  return obj;\n}\n// new method to populate image data from segmentation dicom image\nfunction getAimImageDataFromSeg(image) {\n  var obj = {};\n  obj.aim = {};\n  obj.study = {};\n  obj.series = {};\n  obj.equipment = {};\n  obj.person = {};\n  obj.image = [];\n  const { aim, study, series, equipment, person } = obj;\n  // seg data is coming in dcmjs format\n  aim.studyInstanceUid = image.StudyInstanceUID || \"\";\n  aim.comment = { value: \"\" };\n  study.startTime = image.StudyTime || \"\";\n  study.instanceUid = image.StudyInstanceUID || \"\";\n  study.startDate = image.StudyDate || \"\";\n  study.accessionNumber = image.AccessionNumber || \"\";\n  series.instanceUid = image.ReferencedSeriesSequence.SeriesInstanceUID || \"\";\n  obj.image.push(getSingleImageDataFromSeg(image));\n  equipment.manufacturerName = image.Manufacturer || \"\";\n  equipment.manufacturerModelName = image.ManufacturerModelName || \"\";\n  equipment.softwareVersion = image.SoftwareVersions || \"\";\n  person.sex = image.PatientSex || \"\";\n  person.name = image.PatientName || \"\";\n  person.patientId = image.PatientID || \"\";\n  person.birthDate = image.PatientBirthDate || \"\";\n  return obj;\n}\nfunction getRefImageFromSeg(dataset) {\n  // I needed to check if the sequence is array in each step as dcmjs makes it an object if there is only one item\n  let refImage = \"\";\n  const firstFrame = Array.isArray(dataset.PerFrameFunctionalGroupsSequence)\n    ? dataset.PerFrameFunctionalGroupsSequence[0]\n    : dataset.PerFrameFunctionalGroupsSequence;\n  if (firstFrame.DerivationImageSequence) {\n    const derivation = Array.isArray(firstFrame.DerivationImageSequence)\n      ? firstFrame.DerivationImageSequence[0]\n      : firstFrame.DerivationImageSequence;\n    refImage = Array.isArray(derivation.SourceImageSequence)\n      ? derivation.SourceImageSequence[0]\n      : derivation.SourceImageSequence;\n  } else if (dataset.ReferencedSeriesSequence) {\n    const refSeries = Array.isArray(dataset.ReferencedSeriesSequence)\n      ? dataset.ReferencedSeriesSequence[0]\n      : dataset.ReferencedSeriesSequence;\n    refImage = Array.isArray(refSeries.ReferencedInstanceSequence)\n      ? refSeries.ReferencedInstanceSequence[0]\n      : refSeries.ReferencedInstanceSequence;\n  }\n  return refImage;\n}\n\n// new method inspired by getSingleImageData to get data from segmentations\nfunction getSingleImageDataFromSeg(image) {\n  const refImage = getRefImageFromSeg(image);\n  return {\n    sopClassUid: refImage.ReferencedSOPClassUID || \"\",\n    sopInstanceUid: refImage.ReferencedSOPInstanceUID || \"\",\n  };\n}\n"],"names":["aimConf","dcmDesignator","lexVersion","modalities","codeValue","codeMeaning","codingSchemeDesignator","codingSchemeVersion","CT","CR","DX","PT","MR","US","MG","generateUid","uid","Math","floor","random","index","Aim","constructor","data","aimType","updatedAimId","trackingUId","aimData","_defineProperty","this","now","Date","getFullYear","getMonth","slice","getDate","getHours","getMinutes","getSeconds","name","value","obj","label","size","Dimension","Object","assign","_createObject","dataType","code","codeSystem","unit","preLabel","_createDoubleDataType","_createDimension","codeSystemName","displayNameValue","length","uId","root","_createTypeCode","CalculationResult","_createCalcResult","imageAnnotations","ImageAnnotation","calculationEntityCollection","push","longAxis","shortAxis","area","volume","typeCodeDcm","mean","_getAimUnitAndDcmTypeCode","CalculationEntity","stdDev","min","max","entities","createMeanCalcEntity","createStdDevCalcEntity","createMinCalcEntity","createMaxCalcEntity","createLongAxisCalcEntity","concat","createCommonCalcEntites","createShortAxisCalcEntity","coordinate","x","y","points","coordinates","forEach","point","_createCoordinate","type","shapeIndex","imageUid","frameNum","lineStyle","MarkupEntity","TwoDimensionSpatialCoordinate","_createCoordinateArray","markupEntityCollection","temp","enumAimType","studyAnnotation","sopClassUid","image","modality","series","study","sopInstanceUid","imageAnnotation","instanceUid","_createModality","_createImageCollection","accessionNumber","startTime","startDate","_createImageSeries","_createImageStudy","_createImageReferenceEntity","comment","typeCode","imagingPhysicalEntityCollection","imagingObservationEntityCollection","inferenceEntityCollection","aim","_getComment","ImageAnnotationStatement","_createImageReferanceEntityCollection","_getProgrammedComment","SEPERATOR","description","instanceNumber","number","referenceType","objectId","subjectId","references","imageAnnotationStatementCollection","segmentation","referencedSopInstanceUid","seriesInstanceUid","studyInstanceUid","segmentationEntityCollection","SegmentationEntity","person","sex","patientId","birthDate","id","equipment","manufacturerName","manufacturerModelName","softwareVersion","user","loginName","wrappedAim","JSON","stringify","parse","getAim","answers","getAimImageData","getStudyAimData","addSemanticAnswersToAimData","aimVersion","uniqueIdentifier","dateTime","_createEquipment","_createPerson","_createImageAnnotations","undefined","static","seriesAnnotation","getCalculationEntitiesOfMarkUp","markupUid","imageAnnotationStatements","ImageAnnotationCollection","getImageAnnotationStatements","calculations","statement","objectUniqueIdentifier","calculationUid","subjectUniqueIdentifier","calculationEntities","getCalculationEntities","calculation","calcResult","calculationResultCollection","calculationDataCollection","calcValue","CalculationData","parseCalculation","string","metadata","x0020000d","x00080030","x00080020","x00080050","x0020000e","x00080060","x00200011","x0008103e","x00200013","x00080016","x00080018","getSingleImageData","x00080070","x00081090","x00181020","x00100040","x00100010","x00100020","x00100030","_study","studyUID","studyTime","studyDate","studyAccessionNumber","patientName","patientID","birthdate","examTypes","getStudyModalityFromExamTypes","inferenceEntity","console","log","indexOf","splice","includes","getRefImageFromSeg","dataset","refImage","firstFrame","Array","isArray","PerFrameFunctionalGroupsSequence","DerivationImageSequence","derivation","SourceImageSequence","ReferencedSeriesSequence","refSeries","ReferencedInstanceSequence","userInfo","seedData","StudyInstanceUID","StudyTime","StudyDate","AccessionNumber","SeriesInstanceUID","ReferencedSOPClassUID","ReferencedSOPInstanceUID","getSingleImageDataFromSeg","Manufacturer","ManufacturerModelName","SoftwareVersions","PatientSex","PatientName","PatientID","PatientBirthDate","getAimImageDataFromSeg","sessionStorage","getItem","addUserToSeedData","segEntityData","segStats","segId","createSegmentationEntity","meanId","createImageAnnotationStatement","stdDevId","minId","maxId","volumeId","addSegmentationToAim","SOPClassUID","SOPInstanceUID","getSegmentationEntityDataFromSeg","SegmentSequence","SeriesDescription","SegmentLabel","aims","imageIdSpecificMarkups","imageReferenceEntityCollection","ImageReferenceEntity","imageStudy","imageSeries","imageCollection","Image","aimUid","markupEntity","imageId","frameNumber","error","twoDimensionSpatialCoordinateCollection","color","lineColor","retData","getMarkup","segmentationEntity","markupType","getSegmentation","parseAim","err"],"mappings":"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"}