{"version":3,"file":"aimapi.min.js","sources":["../src/aimConf.js","../utils/modality.js","../utils/aid.js","../src/Aim.jsx","../src/aimHelper.js"],"sourcesContent":["export default {\n  aimVersion: \"AIMv4_2\",\n  \"xmlns:xsi\": \"http://www.w3.org/2001/XMLSchema-instance\",\n  \"xmlns:rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n  xmlns: \"gme://caCORE.caCORE/4.4/edu.northwestern.radiology.AIM\",\n  \"xsi:schemaLocation\":\n    \"gme://caCORE.caCORE/4.4/edu.northwestern.radiology.AIM AIM_v4.2_rv2_XML.xsd\"\n};\n","var dcmDesignator = \"DCM\";\nvar lexVersion = \"20121129\";\n//from the link below\n//http://dicom.nema.org/medical/dicom/current/output/chtml/part16/sect_CID_29.html\n//http://www.dicomlibrary.com/dicom/sop/\n\n//Default Values=> codeValue:99EPADM0 codeMaeaning:NA codingSchemeDesignator:99EPAD\n\nexport var modalities = {\n  \"1.2.840.10008.5.1.4.1.1.2\": {\n    codeValue: \"CT\",\n    codeMeaning: \"Computed Tomography\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion\n  },\n  \"1.2.840.10008.5.1.4.1.1.1\": {\n    codeValue: \"CR\",\n    codeMeaning: \"Computed Radiography\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion\n  },\n  \"1.2.840.10008.5.1.4.1.1.128\": {\n    codeValue: \"PT\",\n    codeMeaning: \"Positron emission tomography\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion\n  },\n  \"1.2.840.10008.5.1.4.1.1.4\": {\n    codeValue: \"MR\",\n    codeMeaning: \"Magnetic Resonance\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion\n  },\n  \"1.2.840.10008.5.1.4.1.1.6.1\": {\n    codeValue: \"US\",\n    codeMeaning: \"Ultrasound\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion\n  },\n  \"1.2.840.10008.5.1.4.1.1.1.2\": {\n    codeValue: \"MG\",\n    codeMeaning: \"Mammography\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion\n  },\n  \"1.2.840.10008.5.1.4.1.1.1.2.1\": {\n    codeValue: \"MG\",\n    codeMeaning: \"Mammography\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion\n  },\n  CT: {\n    codeValue: \"CT\",\n    codeMeaning: \"Computed Tomography\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion\n  },\n  CR: {\n    codeValue: \"CR\",\n    codeMeaning: \"Computed Radiography\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion\n  },\n  PT: {\n    codeValue: \"PT\",\n    codeMeaning: \"Positron emission tomography\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion\n  },\n  MR: {\n    codeValue: \"MR\",\n    codeMeaning: \"Magnetic Resonance\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion\n  },\n  US: {\n    codeValue: \"US\",\n    codeMeaning: \"Ultrasound\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion\n  },\n  MG: {\n    codeValue: \"MG\",\n    codeMeaning: \"Mammography\",\n    codingSchemeDesignator: dcmDesignator,\n    codingSchemeVersion: lexVersion\n  }\n};\n","/**\n * For creating DICOM uids\n * Taken from dcmjs MetaDictionary\n * https://github.com/dcmjs-org/dcmjs/blob/master/src/DicomMetaDictionary.js#L5\n */\nexport function generateUid() {\n  let uid = \"2.25.\" + Math.floor(1 + Math.random() * 9);\n  for (let index = 0; index < 38; index++) {\n    uid = uid + Math.floor(Math.random() * 10);\n  }\n  return uid;\n}\n\nexport function persistExpandView(expanded, data, newData, id) {\n  const expandMap = {};\n  let counter = 0;\n  newData.forEach((el, i) => {\n    if (counter < data.length) {\n      if (el[id] === data[counter][id]) {\n        expandMap[i] = expanded[counter];\n        counter += 1;\n      } else {\n        expandMap[i] = false;\n      }\n    }\n  });\n  return expandMap;\n}\n","import aimConf from \"./aimConf\";\nimport { modalities } from \"../utils/modality\";\nimport { generateUid } from \"../utils/aid\";\n\nclass Aim {\n  constructor(imageData, aimType, updatedAimId) {\n    this.temp = {};\n    ({\n      aim: this.temp.aim,\n      study: this.temp.study,\n      series: this.temp.series,\n      image: this.temp.image,\n      segmentation: this.temp.segmentation,\n      equipment: this.temp.equipment,\n      user: this.temp.user,\n      person: this.temp.person\n    } = imageData);\n    this.xmlns = aimConf.xmlns;\n    this[\"xmlns:rdf\"] = aimConf[\"xmlns:rdf\"];\n    this[\"xmlns:xsi\"] = aimConf[\"xmlns:xsi\"];\n    this.aimVersion = aimConf.aimVersion;\n    this[\"xsi:schemaLocation\"] = aimConf[\"xsi:schemaLocation\"];\n    this.uniqueIdentifier = \"\";\n    this.studyInstanceUid = { root: this.temp.aim.studyInstanceUid };\n    this.seriesInstanceUid = { root: generateUid() };\n    this.accessionNumber = { value: this.temp.study.accessionNumber };\n    this.dateTime = { value: this.getDate() };\n    this.user = this._createUser(this.temp.user);\n    this.equipment = this._createEquipment(this.temp.equipment);\n    this.person = this._createPerson(this.temp.person);\n    this.imageAnnotations = {\n      ImageAnnotation: [this._createImageAnnotations(aimType)]\n    };\n    if (updatedAimId === undefined)\n      this.uniqueIdentifier = { root: generateUid() };\n    else this.uniqueIdentifier = { root: updatedAimId };\n  }\n\n  static parse(data) {\n    return new Aim(data);\n  }\n\n  // static getMarkups(aim) {\n  //   let annotations = [];\n  //   let annotation = {};\n  //   const markupEntities =\n  //     aim.imageAnnotations.ImageAnnotation.markupEntityCollection.MarkupEntity;\n\n  //   if (markupEntities.constructor === Array) {\n  //     markupEntities.map(markupEntity => {\n  //       var imageId = markupEntity[\"imageReferenceUid\"][\"root\"];\n  //       var markupUid = markupEntity[\"uniqueIdentifier\"][\"root\"];\n  //       var calculations = this.getCalculationEntitiesOfMarkUp(aim, markupUid);\n  //       annotations.push({\n  //         imageId: imageId,\n  //         markupType: markupEntity[\"xsi:type\"],\n  //         coordinates:\n  //           markupEntity.twoDimensionSpatialCoordinateCollection\n  //             .TwoDimensionSpatialCoordinate,\n  //         calculations: calculations\n  //       });\n  //       this.getCalculationEntitiesOfMarkUp(aim);\n  //     });\n  //     return annotations;\n  //   } else if (\n  //     Object.entries(markupEntities).length !== 0 &&\n  //     markupEntities.constructor === Object\n  //   ) {\n  //     const imageId = markupEntities[\"imageReferenceUid\"][\"root\"];\n  //     const markupUid = markupEntities[\"uniqueIdentifier\"][\"root\"];\n  //     const calculations = this.getCalculationEntitiesOfMarkUp(aim, markupUid);\n  //     return {\n  //       imageId: imageId,\n  //       markupType: markupEntities[\"xsi:type\"],\n  //       coordinates:\n  //         markupEntities.twoDimensionSpatialCoordinateCollection\n  //           .TwoDimensionSpatialCoordinate,\n  //       calculations: calculations\n  //     };\n  //   }\n  // }\n\n  getDate = () => {\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = (\"0\" + (now.getMonth() + 1)).slice(-2);\n    const day = (\"0\" + now.getDate()).slice(-2);\n    const hours = (\"0\" + now.getHours()).slice(-2);\n    const minutes = (\"0\" + now.getMinutes()).slice(-2);\n    const seconds = (\"0\" + now.getSeconds()).slice(-2);\n    return year + month + day + hours + minutes + seconds;\n  };\n\n  _createObject = (name, value) => {\n    var obj = {};\n    obj[name] = { value };\n    return obj;\n  };\n\n  /*                                          */\n  /*  Calculation Entitiy Realted Functions   */\n  /*                                          */\n\n  _createDimension = (label, index = 0, size = 1) => {\n    return {\n      Dimension: [\n        Object.assign(\n          {},\n          this._createObject(\"size\", size),\n          this._createObject(\"index\", index),\n          this._createObject(\"label\", label)\n        )\n      ]\n    };\n  };\n\n  _createDoubleDataType = () => {\n    var obj = {\n      dataType: {\n        code: \"C48870\",\n        codeSystem: \"NCI\",\n        \"iso:displayName\": { \"xmlns:iso\": \"uri:iso.org:21090\", value: \"Double\" }\n      }\n    };\n    return obj;\n  };\n\n  //preLabel is used for preceding the name like LongAxis || ShortAxis\n  _createCalcResult = (unit, label, value, preLabel = \"\") => {\n    var obj = this._createObject(\"unitOfMeasure\", unit);\n    Object.assign(obj, this._createDoubleDataType());\n    obj[\"xsi:type\"] = \"CompactCalculationResult\";\n    obj[\"dimensionCollection\"] = this._createDimension(preLabel + label);\n    obj[\"type\"] = \"Scalar\";\n    Object.assign(obj, this._createObject(\"value\", `${value}`));\n    return obj;\n  };\n\n  //if called with the default values returns DCM type code\n  _createTypeCode = (\n    code = \"11203\",\n    codeSystemName = \"DCM\",\n    displayNameValue = \"Attenuation Coefficient\"\n  ) => {\n    var obj = {};\n    obj[\"code\"] = code;\n    obj[\"codeSystemName\"] = codeSystemName;\n    obj[\"iso:displayName\"] = {\n      \"xmlns:iso\": \"uri:iso.org:21090\",\n      value: displayNameValue\n    };\n    return obj;\n  };\n\n  createLengthCalcEntity = length => {\n    let { unit, value } = length;\n    var obj = {};\n    obj[\"calculationResultCollection\"] = {\n      CalculationResult: [this._createCalcResult(unit, \"LineLength\", value)]\n    };\n    obj[\"description\"] = { value: \"Length\" };\n    const uId = generateUid();\n    obj[\"uniqueIdentifier\"] = { root: uId };\n    obj[\"typeCode\"] = [this._createTypeCode(\"G-D7FE\", \"SRT\", \"Length\")];\n    this.imageAnnotations.ImageAnnotation[0].calculationEntityCollection[\n      \"CalculationEntity\"\n    ].push(obj);\n    return uId;\n  };\n\n  createLongAxisCalcEntity = longAxis => {\n    let { unit, value } = longAxis;\n    var obj = {};\n    obj[\"calculationResultCollection\"] = {\n      CalculationResult: [this._createCalcResult(unit, \"LongAxis\", value)]\n    };\n    obj[\"description\"] = { value: \"LongAxis\" };\n    const uId = generateUid();\n    obj[\"uniqueIdentifier\"] = { root: uId };\n    obj[\"typeCode\"] = [this._createTypeCode(\"G-A185\", \"SRT\", \"LongAxis\")];\n    this.imageAnnotations.ImageAnnotation[0].calculationEntityCollection[\n      \"CalculationEntity\"\n    ].push(obj);\n    return uId;\n  };\n\n  createShortAxisCalcEntity = shortAxis => {\n    let { unit, value } = shortAxis;\n    var obj = {};\n    obj[\"calculationResultCollection\"] = {\n      CalculationResult: [this._createCalcResult(unit, \"ShortAxis\", value)]\n    };\n    obj[\"description\"] = { value: \"ShortAxis\" };\n    const uId = generateUid();\n    obj[\"uniqueIdentifier\"] = { root: uId };\n    obj[\"typeCode\"] = [this._createTypeCode(\"G-A186\", \"SRT\", \"ShortAxis\")];\n    this.imageAnnotations.ImageAnnotation[0].calculationEntityCollection[\n      \"CalculationEntity\"\n    ].push(obj);\n    return uId;\n  };\n\n  createMeanCalcEntity = (value, preLabel) => {\n    var { unit, mean } = value;\n    console.log(\"Unit\", unit);\n    const { unitObj, typeCodeDcm } = this._getAimUnitAndDcmTypeCode(unit);\n    var obj = {};\n    obj[\"calculationResultCollection\"] = {\n      CalculationResult: [this._createCalcResult(unitObj, \"Mean\", mean, preLabel)]\n    };\n    obj[\"description\"] = { value: \"Mean\" };\n    const uId = generateUid();\n    obj[\"uniqueIdentifier\"] = { root: uId };\n    obj[\"typeCode\"] = [\n      typeCodeDcm,\n      this._createTypeCode(\"R-00317\", \"SRT\", \"Mean\")\n    ];\n    this.imageAnnotations.ImageAnnotation[0].calculationEntityCollection.CalculationEntity.push(\n      obj\n    );\n    return uId;\n  };\n\n  createStdDevCalcEntity = (value, preLabel) => {\n    var { unit, stdDev } = value;\n    const { unitObj, typeCodeDcm } = this._getAimUnitAndDcmTypeCode(unit);\n\n    var obj = {};\n    obj[\"calculationResultCollection\"] = {\n      CalculationResult: [\n        this._createCalcResult(unitObj, \"Standard Deviation\", stdDev, preLabel)\n      ]\n    };\n    obj[\"description\"] = { value: \"Standard Deviation\" };\n    const uId = generateUid();\n    obj[\"uniqueIdentifier\"] = { root: uId };\n    obj[\"typeCode\"] = [\n      typeCodeDcm,\n      this._createTypeCode(\"R-10047\", \"SRT\", \"Standard Deviation\")\n    ];\n    this.imageAnnotations.ImageAnnotation[0].calculationEntityCollection[\n      \"CalculationEntity\"\n    ].push(obj);\n    return uId;\n  };\n\n  createMinCalcEntity = (value, preLabel) => {\n    var { unit, min } = value;\n    const { unitObj, typeCodeDcm } = this._getAimUnitAndDcmTypeCode(unit);\n    var obj = {};\n    obj[\"calculationResultCollection\"] = {\n      CalculationResult: [\n        this._createCalcResult(unitObj, \"Minimum\", min, preLabel)\n      ]\n    };\n    obj[\"description\"] = { value: \"Minimum\" };\n    const uId = generateUid();\n    obj[\"uniqueIdentifier\"] = { root: uId };\n    obj[\"typeCode\"] = [\n      typeCodeDcm,\n      this._createTypeCode(\"R-404FB\", \"SRT\", \"Minimum\")\n    ];\n    this.imageAnnotations.ImageAnnotation[0].calculationEntityCollection[\n      \"CalculationEntity\"\n    ].push(obj);\n    return uId;\n  };\n\n  createMaxCalcEntity = (value, preLabel) => {\n    var { unit, max } = value;\n    const { unitObj, typeCodeDcm } = this._getAimUnitAndDcmTypeCode(unit);\n    var obj = {};\n    obj[\"calculationResultCollection\"] = {\n      CalculationResult: [\n        this._createCalcResult(unitObj, \"Maximum\", max, preLabel)\n      ]\n    };\n    obj[\"description\"] = { value: \"Maximum\" };\n    const uId = generateUid();\n    obj[\"uniqueIdentifier\"] = { root: uId };\n    obj[\"typeCode\"] = [\n      typeCodeDcm,\n      this._createTypeCode(\"G-A437\", \"SRT\", \"Maximum\")\n    ];\n    this.imageAnnotations.ImageAnnotation[0].calculationEntityCollection[\n      \"CalculationEntity\"\n    ].push(obj);\n    return uId;\n  };\n\n  _getAimUnitAndDcmTypeCode = unit => {\n    if (unit === \"hu\")\n      return { unit: \"[hnsf'U]\", typeCodeDcm: this._createTypeCode() };\n    else if (unit === \"suv\")\n      return {\n        unit: \"{SUVbw}g/ml\",\n        typeCodeDcm: this._createTypeCode(126401, \"DCM\", \"SUVbw\")\n      };\n  };\n\n  createVolumeCalcEntity = (value, preLabel) => {\n    var { unit, volume } = value;\n    var obj = {};\n    obj[\"calculationResultCollection\"] = {\n      CalculationResult: [\n        this._createCalcResult(unit, \"Volume\", volume, preLabel)\n      ]\n    };\n    obj[\"description\"] = { value: \"Volume\" };\n    const uId = generateUid();\n    obj[\"uniqueIdentifier\"] = { root: uId };\n    obj[\"typeCode\"] = [this._createTypeCode(\"RID28668\", \"Radlex\", \"Volume\")];\n    this.imageAnnotations.ImageAnnotation[0].calculationEntityCollection[\n      \"CalculationEntity\"\n    ].push(obj);\n    return uId;\n  };\n\n  createCommonCalcEntites = (mean, stdDev, min, max, preLabel) => {\n    var entities = [];\n    entities.push(this.createMeanCalcEntity(mean, preLabel));\n    entities.push(this.createStdDevCalcEntity(stdDev, preLabel));\n    entities.push(this.createMinCalcEntity(min, preLabel));\n    entities.push(this.createMaxCalcEntity(max, preLabel));\n    return entities;\n  };\n\n  // createLineCalcEntities = (length, mean, stdDev, min, max) => {\n  //   var entities = [];\n  //   entities.push(this.createLengthCalcEntity(length));\n  //   return entities.concat(\n  //     this.createCommonCalcEntites(mean, stdDev, min, max)\n  //   );\n  // };\n\n  createLongAxisCalcEntities = (longAxis, mean, stdDev, min, max) => {\n    var entities = [];\n    entities.push(this.createLongAxisCalcEntity(longAxis));\n    return entities.concat(\n      this.createCommonCalcEntites(mean, stdDev, min, max, \"LongAxis_\")\n    );\n  };\n\n  createShortAxisCalcEntities = (shortAxis, mean, stdDev, min, max) => {\n    var entities = [];\n    entities.push(this.createShortAxisCalcEntity(shortAxis));\n    return entities.concat(\n      this.createCommonCalcEntites(mean, stdDev, min, max, \"ShortAxis_\")\n    );\n  };\n\n  createCalculationEntityCollection = entities => {\n    var obj = {};\n    obj[\"calculationEntityCollection\"] = { CalculationEntity: entities };\n    return obj;\n  };\n\n  /*                                          */\n  /*  Markup Entitiy Realted Functions        */\n  /*                                          */\n\n  _createCoordinate = (coordinate, index) => {\n    var obj = {};\n    obj[\"x\"] = { value: coordinate.x };\n    obj[\"coordinateIndex\"] = { value: index };\n    obj[\"y\"] = { value: coordinate.y };\n    return obj;\n  };\n\n  _createCoordinateArray = points => {\n    var coordinates = [];\n    points.forEach((point, index) => {\n      coordinates.push(this._createCoordinate(point, index));\n    });\n    return coordinates;\n  };\n\n  addMarkupEntity = (type, shapeIndex, points, imageReferenceUid) => {\n    const frameNumber = this._getFrameNumber(imageReferenceUid);\n    if (frameNumber > -1)\n      imageReferenceUid = imageReferenceUid.split(\"&frame=\")[0]; //if multiframe strip the frame number from imageUID\n\n    var obj = {};\n    obj[\"includeFlag\"] = { value: true };\n    obj[\"twoDimensionSpatialCoordinateCollection\"] = {\n      TwoDimensionSpatialCoordinate: this._createCoordinateArray(points)\n    };\n    const uId = generateUid();\n    obj[\"shapeIdentifier\"] = { value: shapeIndex };\n    obj[\"uniqueIdentifier\"] = { root: uId };\n    obj[\"xsi:type\"] = type;\n    obj[\"imageReferenceUid\"] = { root: imageReferenceUid };\n    obj[\"referencedFrameNumber\"] = { value: frameNumber };\n    this.imageAnnotations.ImageAnnotation[0].markupEntityCollection.MarkupEntity.push(\n      obj\n    );\n    return uId;\n  };\n\n  _getFrameNumber = imageReferenceUid => {\n    const frameNumber = imageReferenceUid.split(\"frame=\");\n    if (frameNumber.length > 1) return frameNumber[1];\n    return 1;\n  };\n\n  /*                                          */\n  /*  Image Refrence Entity Collection        */\n  /*                                          */\n  _createModality = () => {\n    const sopClassUid = this.temp.image[0].sopClassUid;\n    if (sopClassUid && modalities[sopClassUid])\n      var {\n        codeValue,\n        codingSchemeDesignator,\n        codeMeaning,\n        codingSchemeVersion\n      } = modalities[sopClassUid];\n    else {\n      const modality = this.temp.series.modality;\n      if (modality && modalities[modality]) {\n        var {\n          codeValue,\n          codingSchemeDesignator,\n          codeMeaning,\n          codingSchemeVersion\n        } = modalities[modality];\n      }\n    }\n    var obj = {};\n    obj[\"code\"] = codeValue || \"\";\n    obj[\"codeSystemName\"] = codingSchemeDesignator || \"\";\n    obj[\"iso:displayName\"] = {\n      \"xmlns:iso\": \"uri:iso.org:21090\",\n      value: codeMeaning || \"\"\n    };\n    obj[\"codeSystemVersion\"] = codingSchemeVersion || \"\";\n    return obj;\n  };\n\n  _createImageCollection = () => {\n    let obj = {};\n    obj[\"Image\"] = [];\n    this.temp.image.forEach(image => {\n      let { sopClassUid, sopInstanceUid } = image;\n      sopClassUid = { root: sopClassUid };\n      sopInstanceUid = { root: sopInstanceUid };\n      obj[\"Image\"].push({ sopClassUid, sopInstanceUid });\n    });\n    return obj;\n  };\n\n  _createImageSeries = () => {\n    var obj = {};\n    obj[\"modality\"] = this._createModality();\n    obj[\"imageCollection\"] = this._createImageCollection();\n    obj[\"instanceUid\"] = { root: this.temp.series.instanceUid };\n    return obj;\n  };\n\n  _createImageStudy = () => {\n    const {\n      accessionNumber,\n      startTime,\n      instanceUid,\n      startDate\n    } = this.temp.study;\n    var obj = {};\n    obj[\"imageSeries\"] = this._createImageSeries();\n    obj[\"startTime\"] = { value: startTime };\n    obj[\"instanceUid\"] = { root: instanceUid };\n    obj[\"startDate\"] = { value: startDate };\n    obj[\"accessionNumber\"] = { value: accessionNumber };\n    return obj;\n  };\n\n  _createImageReferenceEntity = () => {\n    var obj = {};\n    obj[\"imageStudy\"] = this._createImageStudy();\n    obj[\"xsi:type\"] = \"DicomImageReferenceEntity\";\n    obj[\"uniqueIdentifier\"] = { root: generateUid() };\n    return obj;\n  };\n\n  _createImageReferanceEntityCollection = () => {\n    var obj = {};\n    obj[\"ImageReferenceEntity\"] = [this._createImageReferenceEntity()];\n    return obj;\n  };\n\n  //\n  //\n  //\n  _createImageAnnotations = aimType => {\n    const {\n      name,\n      comment,\n      typeCode,\n      imagingPhysicalEntityCollection,\n      imagingObservationEntityCollection,\n      inferenceEntityCollection\n    } = this.temp.aim;\n    var obj = {};\n    obj[\"uniqueIdentifier\"] = { root: generateUid() };\n    obj[\"typeCode\"] = typeCode;\n    obj[\"dateTime\"] = { value: this.getDate() };\n    obj[\"name\"] = name;\n    obj[\"comment\"] = comment;\n    obj[\"precedentReferencedAnnotationUid\"] = { root: \"\" };\n    if (imagingPhysicalEntityCollection)\n      obj[\"imagingPhysicalEntityCollection\"] = imagingPhysicalEntityCollection;\n    if (aimType === 1) {\n      //if this is an image annotation\n      obj[\"calculationEntityCollection\"] = { CalculationEntity: [] };\n      obj[\"markupEntityCollection\"] = { MarkupEntity: [] };\n      obj[\"imageAnnotationStatementCollection\"] = {\n        ImageAnnotationStatement: []\n      };\n    }\n    if (imagingObservationEntityCollection)\n      obj[\n        \"imagingObservationEntityCollection\"\n      ] = imagingObservationEntityCollection;\n    if (inferenceEntityCollection)\n      obj[\"inferenceEntityCollection\"] = inferenceEntityCollection;\n    obj[\n      \"imageReferenceEntityCollection\"\n    ] = this._createImageReferanceEntityCollection();\n    return obj;\n  };\n\n  createImageAnnotationStatement = (referenceType, objectId, subjectId) => {\n    //this is called externally\n    var obj = {};\n    var references;\n    referenceType === 1\n      ? (references = \"CalculationEntityReferencesMarkupEntityStatement\")\n      : (references = \"CalculationEntityReferencesSegmentationEntityStatement\");\n    obj[\"xsi:type\"] = references;\n    obj[\"objectUniqueIdentifier\"] = { root: objectId };\n    obj[\"subjectUniqueIdentifier\"] = { root: subjectId };\n    this.imageAnnotations.ImageAnnotation[0].imageAnnotationStatementCollection.ImageAnnotationStatement.push(\n      obj\n    );\n  };\n\n  // createImageAnnotationStatementCollection = () => {\n  //   var obj = {};\n  //   obj[\"ImageAnnotationStatement\"] = [];\n  //   return obj;\n  // };\n\n  // //\n  // //\n  // // Image Annotations\n  // createImageAnnotation = (annotationStatementCollection = {}) => {\n  //   var obj = {};\n  //   obj[\"dateTime\"] = { value: this.getDate() };\n  //   obj[\n  //     \"imageAnnotationStatementCollection\"\n  //   ] = this.createImageAnnotationStatementCollection();\n  //   return obj;\n  // };\n\n  // createImageAnnotations = imageAnnotation => {\n  //   var obj = {};\n  //   obj[\"imageAnnotations\"] = imageAnnotation;\n  //   return obj;\n  // };\n\n  /*                                                */\n  /*    Segmentation Entitiy Realted Functions      */\n  /*                                                */\n\n  createSegmentationEntity = segmentation => {\n    var obj = {};\n    obj[\"referencedSopInstanceUid\"] = {\n      root: segmentation.referencedSopInstanceUid\n    };\n    obj[\"segmentNumber\"] = { value: 1 };\n    obj[\"seriesInstanceUid\"] = {\n      root: segmentation.seriesInstanceUid\n    };\n    obj[\"studyInstanceUid\"] = {\n      root: segmentation.studyInstanceUid\n    };\n    obj[\"xsi:type\"] = \"DicomSegmentationEntity\";\n    obj[\"sopClassUid\"] = { root: \"1.2.840.10008.5.1.4.1.1.66.4\" };\n    obj[\"sopInstanceUid\"] = { root: segmentation.sopInstanceUid };\n    obj[\"uniqueIdentifier\"] = { root: generateUid() };\n    const imageAnnotation = this.imageAnnotations.ImageAnnotation[0];\n    if (!imageAnnotation.segmentationEntityCollection) {\n      imageAnnotation.segmentationEntityCollection = {};\n      imageAnnotation.segmentationEntityCollection.SegmentationEntity = [];\n    }\n    imageAnnotation.segmentationEntityCollection.SegmentationEntity.push(obj);\n    return obj[\"uniqueIdentifier\"];\n  };\n\n  //\n  //\n  // Person\n  _createPerson = person => {\n    const { sex, name, patientId, birthDate } = person;\n    return {\n      sex: { value: sex },\n      name: { value: name },\n      id: { value: patientId },\n      birthDate: { value: birthDate }\n    };\n  };\n\n  //\n  //\n  // Eqipment\n  _createEquipment = equipment => {\n    const {\n      manufacturerName,\n      manufacturerModelName,\n      softwareVersion\n    } = equipment;\n    return {\n      manufacturerName: { value: manufacturerName },\n      manufacturerModelName: { value: manufacturerModelName },\n      softwareVersion: { value: softwareVersion }\n    };\n  };\n\n  //\n  //\n  // User\n  _createUser = user => {\n    const { loginName, name } = user;\n    return {\n      loginName: { value: loginName },\n      name: { value: name }\n    };\n  };\n\n  getAim = () => {\n    delete this[\"temp\"];\n    const stringAim = JSON.stringify(this);\n    const wrappedAim = `{\"ImageAnnotationCollection\": ${stringAim} } `;\n    return wrappedAim;\n  };\n}\n\nexport default Aim;\n","import Aim from \"./Aim.jsx\";\n\n// moved from aimEditor.jsx\nconst enumAimType = {\n  imageAnnotation: 1,\n  seriesAnnotation: 2,\n  studyAnnotation: 3,\n};\n\nexport function getImageIdAnnotations(aims) {\n  let imageIdSpecificMarkups = {};\n  aims.forEach(aim => parseAim(aim, imageIdSpecificMarkups));\n  return imageIdSpecificMarkups;\n}\n\nfunction parseAim(aim, imageIdSpecificMarkups) {\n  var imageAnnotation =\n    aim.ImageAnnotationCollection.imageAnnotations.ImageAnnotation[0];\n  //check if the aim has markup\n  if (imageAnnotation.markupEntityCollection) {\n    var markupEntities = imageAnnotation.markupEntityCollection.MarkupEntity;\n    markupEntities.forEach(markupEntity => {\n      const { imageId, data } = getMarkup(markupEntity, aim);\n      if (!imageIdSpecificMarkups[imageId])\n        imageIdSpecificMarkups[imageId] = [data];\n      else imageIdSpecificMarkups[imageId].push(data);\n    });\n  }\n  //check if it has segmentation\n  if (imageAnnotation.segmentationEntityCollection) {\n    var segmentationEntities =\n      imageAnnotation.segmentationEntityCollection.SegmentationEntity;\n    segmentationEntities.forEach(segmentationEntity => {\n      const { imageId, data } = getSegmentation(segmentationEntity, aim);\n      if (!imageIdSpecificMarkups[imageId])\n        imageIdSpecificMarkups[imageId] = [data];\n      else imageIdSpecificMarkups[imageId].push(data);\n    });\n  }\n}\n\nfunction getMarkup(markupEntity, aim) {\n  let imageId = markupEntity[\"imageReferenceUid\"][\"root\"];\n  const frameNumber = markupEntity[\"referencedFrameNumber\"][\"value\"];\n  // if (frameNumber > -1) imageId = imageId + \"&frame=\" + frameNumber; //if multiframe reconstruct the imageId\n  imageId = imageId + \"&frame=\" + frameNumber;\n  const markupUid = markupEntity[\"uniqueIdentifier\"][\"root\"];\n  let calculations = [];\n  try {\n    calculations = getCalculationEntitiesOfMarkUp(aim, markupUid);\n  } catch (error) {\n    console.log(\"Can not get calculations\", error);\n  }\n  const aimUid = aim.ImageAnnotationCollection[\"uniqueIdentifier\"][\"root\"];\n  return {\n    imageId,\n    data: {\n      markupType: markupEntity[\"xsi:type\"],\n      calculations,\n      coordinates:\n        markupEntity.twoDimensionSpatialCoordinateCollection\n          .TwoDimensionSpatialCoordinate,\n      markupUid,\n      aimUid\n    }\n  };\n}\n\nfunction getSegmentation(segmentationEntity, aim) {\n  const imageId = segmentationEntity[\"referencedSopInstanceUid\"][\"root\"];\n  const markupUid = segmentationEntity[\"uniqueIdentifier\"][\"root\"];\n  const calculations = getCalculationEntitiesOfMarkUp(aim, markupUid);\n  const aimUid = aim.ImageAnnotationCollection[\"uniqueIdentifier\"][\"root\"];\n  return {\n    imageId,\n    data: {\n      markupType: segmentationEntity[\"xsi:type\"],\n      calculations,\n      markupUid,\n      aimUid\n    }\n  };\n}\n\nfunction getCalculationEntitiesOfMarkUp(aim, markupUid) {\n  const imageAnnotationStatements = getImageAnnotationStatements(aim);\n  let calculations = [];\n  imageAnnotationStatements.forEach(statement => {\n    if (statement.objectUniqueIdentifier.root === markupUid) {\n      const calculationUid = statement.subjectUniqueIdentifier.root;\n      const calculationEntities = getCalculationEntities(aim);\n      calculationEntities.forEach(calculation => {\n        if (calculation.uniqueIdentifier.root === calculationUid)\n          calculations.push(parseCalculation(calculation));\n      });\n    }\n  });\n  return calculations;\n}\n\nfunction getImageAnnotationStatements(aim) {\n  return aim.ImageAnnotationCollection.imageAnnotations.ImageAnnotation[0]\n    .imageAnnotationStatementCollection.ImageAnnotationStatement;\n}\n\nfunction getCalculationEntities(aim) {\n  return aim.ImageAnnotationCollection.imageAnnotations.ImageAnnotation[0]\n    .calculationEntityCollection.CalculationEntity;\n}\n\nfunction parseCalculation(calculation) {\n  var obj = {};\n  const calcResult =\n    calculation.calculationResultCollection.CalculationResult[0];\n  if (\n    calculation.calculationResultCollection.CalculationResult[0]\n      .calculationDataCollection\n  ) {\n    const calcValue =\n      calculation.calculationResultCollection.CalculationResult[0]\n        .calculationDataCollection.CalculationData[0];\n    obj[\"value\"] = calcValue[\"value\"][\"value\"];\n  } else obj[\"value\"] = calcResult[\"value\"][\"value\"];\n  obj[\"type\"] = calculation[\"description\"][\"value\"];\n  obj[\"unit\"] = calcResult[\"unitOfMeasure\"][\"value\"];\n  return obj;\n}\n\nexport function getAimImageData(image) {\n  var obj = {};\n  obj.aim = {};\n  obj.study = {};\n  obj.series = {};\n  obj.equipment = {};\n  obj.person = {};\n  obj.image = [];\n  const { aim, study, series, equipment, person } = obj;\n\n  aim.studyInstanceUid = image.data.string(\"x0020000d\") || \"\";\n\n  study.startTime = image.data.string(\"x00080030\") || \"\";\n  study.instanceUid = image.data.string(\"x0020000d\") || \"\";\n  study.startDate = image.data.string(\"x00080020\") || \"\";\n  study.accessionNumber = image.data.string(\"x00080050\") || \"\";\n\n  series.instanceUid = image.data.string(\"x0020000e\") || \"\";\n  series.modality = image.data.string(\"x00080060\") || \"\";\n\n  obj.image.push(getSingleImageData(image));\n\n  equipment.manufacturerName = image.data.string(\"x00080070\") || \"\";\n  equipment.manufacturerModelName = image.data.string(\"x00081090\") || \"\";\n  equipment.softwareVersion = image.data.string(\"x00181020\") || \"\";\n\n  person.sex = image.data.string(\"x00100040\") || \"\";\n  person.name = image.data.string(\"x00100010\") || \"\";\n  person.patientId = image.data.string(\"x00100020\") || \"\";\n  person.birthDate = image.data.string(\"x00100030\") || \"\";\n\n  return obj;\n}\n\nfunction getSingleImageData(image) {\n  return {\n    sopClassUid: image.data.string(\"x00080016\") || \"\",\n    sopInstanceUid: image.data.string(\"x00080018\") || \"\"\n  };\n}\n\nfunction addSingleImageDataToAim(aim, image) {\n  if (!aim.image) return;\n  aim.image.push(getSingleImageData(image));\n}\n\n// ---------- aimapi additional methods --------\n// new method inspired by createAimSegmentation in aimEditor.jsx\nexport function createOfflineAimSegmentation(segmentation, userInfo) {\n  // prapare the seed data and create aim\n  const seedData = getAimImageDataFromSeg(segmentation); //aimhelper\n  // admin/ upload user\n  addUserToSeedData(seedData, userInfo);\n  const aim = new Aim(seedData, enumAimType.imageAnnotation); // no this.updatedAimId.\n  // let dataset = await getDatasetFromBlob(segmentation);\n  // if update segmentation Uid should be same as the previous one\n  // console.log('Dataset series uid', segmentation);\n  // fill the segmentation related aim parts\n  const segEntityData = getSegmentationEntityDataFromSeg(segmentation);\n  // TODO fill in stats\n  const segStats = {};\n  addSegmentationToAim(aim, segEntityData, segStats);\n  console.log('AIM in segmentation', aim);\n  return { aim };\n}\n// moved from aimEditor.jsx\nfunction addUserToSeedData(seedData, userInfo) {\n  // this is ui specific, should be changed\n  if (userInfo) {\n    seedData.user = userInfo;\n  } else {\n    let obj = {};\n    obj.loginName = sessionStorage.getItem('username');\n    obj.name = sessionStorage.getItem('displayName');\n    seedData.user = obj;\n  }\n}\n// moved from aimEditor.jsx\nfunction getDatasetFromBlob(segBlob, imageIdx) {\n  return new Promise(resolve => {\n    let segArrayBuffer;\n    var fileReader = new FileReader();\n    fileReader.onload = event => {\n      segArrayBuffer = event.target.result;\n      const dicomData = dcmjs.data.DicomMessage.readFile(segArrayBuffer);\n      const dataset = dcmjs.data.DicomMetaDictionary.naturalizeDataset(dicomData.dict);\n      dataset._meta = dcmjs.data.DicomMetaDictionary.namifyDataset(dicomData.meta);\n      resolve(dataset);\n    };\n    fileReader.readAsArrayBuffer(segBlob);\n  });\n}\n// moved from aimEditor.jsx\nfunction addSegmentationToAim(aim, segEntityData, segStats) {\n  const segId = aim.createSegmentationEntity(segEntityData);\n  const { volume, min, max, mean, stdDev } = segStats;\n  if (mean) {\n    const meanId = aim.createMeanCalcEntity({ mean, unit: \"[hnsf'U]\" });\n    aim.createImageAnnotationStatement(2, segId, meanId);\n  }\n  if (stdDev) {\n    const stdDevId = aim.createStdDevCalcEntity({ stdDev, unit: \"[hnsf'U]\" });\n    aim.createImageAnnotationStatement(2, segId, stdDevId);\n  }\n  if (min) {\n    const minId = aim.createMinCalcEntity({ min, unit: \"[hnsf'U]\" });\n    aim.createImageAnnotationStatement(2, segId, minId);\n  }\n  if (max) {\n    const maxId = aim.createMaxCalcEntity({ max, unit: \"[hnsf'U]\" });\n    aim.createImageAnnotationStatement(2, segId, maxId);\n  }\n  if (volume) {\n    const volumeId = aim.createMaxCalcEntity({ volume, unit: 'mm3' });\n    aim.createImageAnnotationStatement(2, segId, volumeId);\n  }\n}\n// new method inspired by moved getSegmentationEntityData from aimEditor.jsx\nfunction getSegmentationEntityDataFromSeg(dataset) {\n  const refImage = getRefImageFromSeg(dataset);\n  let obj = {};\n  obj['referencedSopInstanceUid'] = refImage.ReferencedSOPInstanceUID;\n  obj['seriesInstanceUid'] = dataset.SeriesInstanceUID;\n  obj['studyInstanceUid'] = dataset.StudyInstanceUID;\n  obj['sopClassUid'] = dataset.SOPClassUID;\n  obj['sopInstanceUid'] = dataset.SOPInstanceUID;\n  return obj;\n}\n// new method to populate image data from segmentation dicom image\nfunction getAimImageDataFromSeg(image) {\n  var obj = {};\n  obj.aim = {};\n  obj.study = {};\n  obj.series = {};\n  obj.equipment = {};\n  obj.person = {};\n  obj.image = [];\n  const { aim, study, series, equipment, person } = obj;\n  // seg data is coming in dcmjs format\n  aim.studyInstanceUid = image.StudyInstanceUID || '';\n  study.startTime = image.StudyTime || '';\n  study.instanceUid = image.StudyInstanceUID || '';\n  study.startDate = image.StudyDate || '';\n  study.accessionNumber = image.AccessionNumber || '';\n  series.instanceUid = image.ReferencedSeriesSequence.SeriesInstanceUID || '';\n  obj.image.push(getSingleImageDataFromSeg(image));\n  equipment.manufacturerName = image.Manufacturer || '';\n  equipment.manufacturerModelName = image.ManufacturerModelName || '';\n  equipment.softwareVersion = image.SoftwareVersions || '';\n  person.sex = image.PatientSex || '';\n  person.name = image.PatientName || '';\n  person.patientId = image.PatientID || '';\n  person.birthDate = image.PatientBirthDate || '';\n  return obj;\n}\nfunction getRefImageFromSeg(dataset) {\n  // I needed to check if the sequence is array in each step as dcmjs makes it an object if there is only one item\n  const firstFrame = Array.isArray(dataset.PerFrameFunctionalGroupsSequence)? dataset.PerFrameFunctionalGroupsSequence[0] : dataset.PerFrameFunctionalGroupsSequence;\n  const derivation = Array.isArray(firstFrame.DerivationImageSequence)? firstFrame.DerivationImageSequence[0] : firstFrame.DerivationImageSequence;\n  const refImage = Array.isArray(derivation.SourceImageSequence)? derivation.SourceImageSequence[0] : derivation.SourceImageSequence;\n  return refImage;\n}\n\n// new method inspired by getSingleImageData to get data from segmentations\nfunction getSingleImageDataFromSeg(image) {\n  const refImage = getRefImageFromSeg(image);\n  return {\n    sopClassUid: refImage.ReferencedSOPClassUID || '',\n    sopInstanceUid: refImage.ReferencedSOPInstanceUID || '',\n  };\n}"],"names":["modalities","codeValue","codeMeaning","codingSchemeDesignator","codingSchemeVersion","CT","CR","PT","MR","US","MG","generateUid","uid","Math","floor","random","index","Aim","constructor","imageData","aimType","updatedAimId","now","Date","getFullYear","getMonth","slice","getDate","getHours","getMinutes","getSeconds","name","value","obj","label","size","Dimension","Object","assign","this","_createObject","dataType","code","codeSystem","unit","preLabel","_createDoubleDataType","_createDimension","codeSystemName","displayNameValue","length","CalculationResult","_createCalcResult","uId","root","_createTypeCode","imageAnnotations","ImageAnnotation","calculationEntityCollection","push","longAxis","shortAxis","mean","console","log","unitObj","typeCodeDcm","_getAimUnitAndDcmTypeCode","CalculationEntity","stdDev","min","max","volume","entities","createMeanCalcEntity","createStdDevCalcEntity","createMinCalcEntity","createMaxCalcEntity","createLongAxisCalcEntity","concat","createCommonCalcEntites","createShortAxisCalcEntity","coordinate","x","y","points","coordinates","forEach","point","_createCoordinate","type","shapeIndex","imageReferenceUid","frameNumber","_getFrameNumber","split","TwoDimensionSpatialCoordinate","_createCoordinateArray","markupEntityCollection","MarkupEntity","sopClassUid","temp","image","modality","series","sopInstanceUid","_createModality","_createImageCollection","instanceUid","accessionNumber","startTime","startDate","study","_createImageSeries","_createImageStudy","_createImageReferenceEntity","comment","typeCode","imagingPhysicalEntityCollection","imagingObservationEntityCollection","inferenceEntityCollection","aim","ImageAnnotationStatement","_createImageReferanceEntityCollection","referenceType","objectId","subjectId","references","imageAnnotationStatementCollection","segmentation","referencedSopInstanceUid","seriesInstanceUid","studyInstanceUid","imageAnnotation","segmentationEntityCollection","SegmentationEntity","person","sex","patientId","birthDate","id","equipment","manufacturerName","manufacturerModelName","softwareVersion","user","loginName","JSON","stringify","xmlns","aimConf","aimVersion","uniqueIdentifier","dateTime","_createUser","_createEquipment","_createPerson","_createImageAnnotations","undefined","data","enumAimType","getCalculationEntitiesOfMarkUp","markupUid","imageAnnotationStatements","ImageAnnotationCollection","getImageAnnotationStatements","calculations","statement","objectUniqueIdentifier","calculationUid","subjectUniqueIdentifier","getCalculationEntities","calculation","calcResult","calculationResultCollection","calculationDataCollection","calcValue","CalculationData","parseCalculation","getRefImageFromSeg","dataset","firstFrame","Array","isArray","PerFrameFunctionalGroupsSequence","derivation","DerivationImageSequence","SourceImageSequence","userInfo","seedData","StudyInstanceUID","StudyTime","StudyDate","AccessionNumber","ReferencedSeriesSequence","SeriesInstanceUID","refImage","ReferencedSOPClassUID","ReferencedSOPInstanceUID","getSingleImageDataFromSeg","Manufacturer","ManufacturerModelName","SoftwareVersions","PatientSex","PatientName","PatientID","PatientBirthDate","getAimImageDataFromSeg","sessionStorage","getItem","addUserToSeedData","segEntityData","segStats","segId","createSegmentationEntity","meanId","createImageAnnotationStatement","stdDevId","minId","maxId","volumeId","addSegmentationToAim","SOPClassUID","SOPInstanceUID","getSegmentationEntityDataFromSeg","string","getSingleImageData","aims","imageIdSpecificMarkups","markupEntity","imageId","error","aimUid","markupType","twoDimensionSpatialCoordinateCollection","getMarkup","segmentationEntity","getSegmentation","parseAim"],"mappings":"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"}